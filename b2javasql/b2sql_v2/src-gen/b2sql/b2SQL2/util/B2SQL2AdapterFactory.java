/**
 * generated by Xtext 2.10.0
 */
package b2sql.b2SQL2.util;

import b2sql.b2SQL2.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see b2sql.b2SQL2.B2SQL2Package
 * @generated
 */
public class B2SQL2AdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static B2SQL2Package modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public B2SQL2AdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = B2SQL2Package.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected B2SQL2Switch<Adapter> modelSwitch =
    new B2SQL2Switch<Adapter>()
    {
      @Override
      public Adapter caseB2SQL2(B2SQL2 object)
      {
        return createB2SQL2Adapter();
      }
      @Override
      public Adapter caseBSQLMachine(BSQLMachine object)
      {
        return createBSQLMachineAdapter();
      }
      @Override
      public Adapter caseBOperation(BOperation object)
      {
        return createBOperationAdapter();
      }
      @Override
      public Adapter caseBTable(BTable object)
      {
        return createBTableAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseBType(BType object)
      {
        return createBTypeAdapter();
      }
      @Override
      public Adapter caseBoolOperation(BoolOperation object)
      {
        return createBoolOperationAdapter();
      }
      @Override
      public Adapter caseBSubTrue(BSubTrue object)
      {
        return createBSubTrueAdapter();
      }
      @Override
      public Adapter caseBSubFalse(BSubFalse object)
      {
        return createBSubFalseAdapter();
      }
      @Override
      public Adapter caseStringOperation(StringOperation object)
      {
        return createStringOperationAdapter();
      }
      @Override
      public Adapter caseBAnyBlock(BAnyBlock object)
      {
        return createBAnyBlockAdapter();
      }
      @Override
      public Adapter caseVoidOperation(VoidOperation object)
      {
        return createVoidOperationAdapter();
      }
      @Override
      public Adapter caseBPredicate(BPredicate object)
      {
        return createBPredicateAdapter();
      }
      @Override
      public Adapter caseSQLCall(SQLCall object)
      {
        return createSQLCallAdapter();
      }
      @Override
      public Adapter caseTableInstance(TableInstance object)
      {
        return createTableInstanceAdapter();
      }
      @Override
      public Adapter caseTIAssignment(TIAssignment object)
      {
        return createTIAssignmentAdapter();
      }
      @Override
      public Adapter caseBParameterTyping(BParameterTyping object)
      {
        return createBParameterTypingAdapter();
      }
      @Override
      public Adapter caseBSubstitution(BSubstitution object)
      {
        return createBSubstitutionAdapter();
      }
      @Override
      public Adapter caseBUnion(BUnion object)
      {
        return createBUnionAdapter();
      }
      @Override
      public Adapter caseBElementStructure(BElementStructure object)
      {
        return createBElementStructureAdapter();
      }
      @Override
      public Adapter caseBElement(BElement object)
      {
        return createBElementAdapter();
      }
      @Override
      public Adapter caseBSet(BSet object)
      {
        return createBSetAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.B2SQL2 <em>B2SQL2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.B2SQL2
   * @generated
   */
  public Adapter createB2SQL2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BSQLMachine <em>BSQL Machine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BSQLMachine
   * @generated
   */
  public Adapter createBSQLMachineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BOperation <em>BOperation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BOperation
   * @generated
   */
  public Adapter createBOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BTable <em>BTable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BTable
   * @generated
   */
  public Adapter createBTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BType <em>BType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BType
   * @generated
   */
  public Adapter createBTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BoolOperation <em>Bool Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BoolOperation
   * @generated
   */
  public Adapter createBoolOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BSubTrue <em>BSub True</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BSubTrue
   * @generated
   */
  public Adapter createBSubTrueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BSubFalse <em>BSub False</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BSubFalse
   * @generated
   */
  public Adapter createBSubFalseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.StringOperation <em>String Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.StringOperation
   * @generated
   */
  public Adapter createStringOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BAnyBlock <em>BAny Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BAnyBlock
   * @generated
   */
  public Adapter createBAnyBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.VoidOperation <em>Void Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.VoidOperation
   * @generated
   */
  public Adapter createVoidOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BPredicate <em>BPredicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BPredicate
   * @generated
   */
  public Adapter createBPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.SQLCall <em>SQL Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.SQLCall
   * @generated
   */
  public Adapter createSQLCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.TableInstance <em>Table Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.TableInstance
   * @generated
   */
  public Adapter createTableInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.TIAssignment <em>TI Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.TIAssignment
   * @generated
   */
  public Adapter createTIAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BParameterTyping <em>BParameter Typing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BParameterTyping
   * @generated
   */
  public Adapter createBParameterTypingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BSubstitution <em>BSubstitution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BSubstitution
   * @generated
   */
  public Adapter createBSubstitutionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BUnion <em>BUnion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BUnion
   * @generated
   */
  public Adapter createBUnionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BElementStructure <em>BElement Structure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BElementStructure
   * @generated
   */
  public Adapter createBElementStructureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BElement <em>BElement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BElement
   * @generated
   */
  public Adapter createBElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link b2sql.b2SQL2.BSet <em>BSet</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see b2sql.b2SQL2.BSet
   * @generated
   */
  public Adapter createBSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //B2SQL2AdapterFactory
