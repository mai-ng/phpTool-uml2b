/*
 * generated by Xtext 2.10.0
 */
package bsql2java.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BSQL2Java2GrammarAccess extends AbstractGrammarElementFinder {
	
	public class BSQL2Java2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BSQL2Java2");
		private final RuleCall cBSQLMachineParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BSQL2Java2:
		//	BSQLMachine;
		@Override public ParserRule getRule() { return rule; }
		
		//BSQLMachine
		public RuleCall getBSQLMachineParserRuleCall() { return cBSQLMachineParserRuleCall; }
	}
	public class BSQLMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BSQLMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMACHINEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cM_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cM_nameIDTerminalRuleCall_1_0 = (RuleCall)cM_nameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSEESKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSeenameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSeenameIDTerminalRuleCall_2_1_0 = (RuleCall)cSeenameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSeenameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSeenameIDTerminalRuleCall_2_2_1_0 = (RuleCall)cSeenameAssignment_2_2_1.eContents().get(0);
		private final Keyword cVARIABLESKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarsIDTerminalRuleCall_4_0 = (RuleCall)cVarsAssignment_4.eContents().get(0);
		private final Keyword cINVARIANTKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInvAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInvBTableParserRuleCall_6_0 = (RuleCall)cInvAssignment_6.eContents().get(0);
		private final Keyword cINITIALISATIONKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cInitAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInitIDTerminalRuleCall_8_0 = (RuleCall)cInitAssignment_8.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cOPERATIONSKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cBopsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cBopsBOperationParserRuleCall_12_0 = (RuleCall)cBopsAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cSemicolonKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cBopsAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cBopsBOperationParserRuleCall_13_1_0 = (RuleCall)cBopsAssignment_13_1.eContents().get(0);
		private final Keyword cENDKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//BSQLMachine:
		//	'MACHINE' m_name=ID ('SEES' seename+=ID ("," seename+=ID)*)?
		//	'VARIABLES' vars=ID
		//	'INVARIANT'
		//	inv=BTable
		//	'INITIALISATION'
		//	init=ID ':=' '{}'
		//	'OPERATIONS'
		//	bops+=BOperation (';' bops+=BOperation)*
		//	"END";
		@Override public ParserRule getRule() { return rule; }
		
		//'MACHINE' m_name=ID ('SEES' seename+=ID ("," seename+=ID)*)? 'VARIABLES' vars=ID 'INVARIANT' inv=BTable 'INITIALISATION'
		//init=ID ':=' '{}' 'OPERATIONS' bops+=BOperation (';' bops+=BOperation)* "END"
		public Group getGroup() { return cGroup; }
		
		//'MACHINE'
		public Keyword getMACHINEKeyword_0() { return cMACHINEKeyword_0; }
		
		//m_name=ID
		public Assignment getM_nameAssignment_1() { return cM_nameAssignment_1; }
		
		//ID
		public RuleCall getM_nameIDTerminalRuleCall_1_0() { return cM_nameIDTerminalRuleCall_1_0; }
		
		//('SEES' seename+=ID ("," seename+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'SEES'
		public Keyword getSEESKeyword_2_0() { return cSEESKeyword_2_0; }
		
		//seename+=ID
		public Assignment getSeenameAssignment_2_1() { return cSeenameAssignment_2_1; }
		
		//ID
		public RuleCall getSeenameIDTerminalRuleCall_2_1_0() { return cSeenameIDTerminalRuleCall_2_1_0; }
		
		//("," seename+=ID)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//seename+=ID
		public Assignment getSeenameAssignment_2_2_1() { return cSeenameAssignment_2_2_1; }
		
		//ID
		public RuleCall getSeenameIDTerminalRuleCall_2_2_1_0() { return cSeenameIDTerminalRuleCall_2_2_1_0; }
		
		//'VARIABLES'
		public Keyword getVARIABLESKeyword_3() { return cVARIABLESKeyword_3; }
		
		//vars=ID
		public Assignment getVarsAssignment_4() { return cVarsAssignment_4; }
		
		//ID
		public RuleCall getVarsIDTerminalRuleCall_4_0() { return cVarsIDTerminalRuleCall_4_0; }
		
		//'INVARIANT'
		public Keyword getINVARIANTKeyword_5() { return cINVARIANTKeyword_5; }
		
		//inv=BTable
		public Assignment getInvAssignment_6() { return cInvAssignment_6; }
		
		//BTable
		public RuleCall getInvBTableParserRuleCall_6_0() { return cInvBTableParserRuleCall_6_0; }
		
		//'INITIALISATION'
		public Keyword getINITIALISATIONKeyword_7() { return cINITIALISATIONKeyword_7; }
		
		//init=ID
		public Assignment getInitAssignment_8() { return cInitAssignment_8; }
		
		//ID
		public RuleCall getInitIDTerminalRuleCall_8_0() { return cInitIDTerminalRuleCall_8_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_9() { return cColonEqualsSignKeyword_9; }
		
		//'{}'
		public Keyword getLeftCurlyBracketRightCurlyBracketKeyword_10() { return cLeftCurlyBracketRightCurlyBracketKeyword_10; }
		
		//'OPERATIONS'
		public Keyword getOPERATIONSKeyword_11() { return cOPERATIONSKeyword_11; }
		
		//bops+=BOperation
		public Assignment getBopsAssignment_12() { return cBopsAssignment_12; }
		
		//BOperation
		public RuleCall getBopsBOperationParserRuleCall_12_0() { return cBopsBOperationParserRuleCall_12_0; }
		
		//(';' bops+=BOperation)*
		public Group getGroup_13() { return cGroup_13; }
		
		//';'
		public Keyword getSemicolonKeyword_13_0() { return cSemicolonKeyword_13_0; }
		
		//bops+=BOperation
		public Assignment getBopsAssignment_13_1() { return cBopsAssignment_13_1; }
		
		//BOperation
		public RuleCall getBopsBOperationParserRuleCall_13_1_0() { return cBopsBOperationParserRuleCall_13_1_0; }
		
		//"END"
		public Keyword getENDKeyword_14() { return cENDKeyword_14; }
	}
	public class BOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBopsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBopsBoolOperationParserRuleCall_0_0 = (RuleCall)cBopsAssignment_0.eContents().get(0);
		private final Assignment cVopsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVopsVoidOperationParserRuleCall_1_0 = (RuleCall)cVopsAssignment_1.eContents().get(0);
		private final Assignment cSopsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSopsStringOperationParserRuleCall_2_0 = (RuleCall)cSopsAssignment_2.eContents().get(0);
		
		//BOperation:
		//	bops=BoolOperation
		//	| vops=VoidOperation
		//	| sops=StringOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//bops=BoolOperation | vops=VoidOperation | sops=StringOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bops=BoolOperation
		public Assignment getBopsAssignment_0() { return cBopsAssignment_0; }
		
		//BoolOperation
		public RuleCall getBopsBoolOperationParserRuleCall_0_0() { return cBopsBoolOperationParserRuleCall_0_0; }
		
		//vops=VoidOperation
		public Assignment getVopsAssignment_1() { return cVopsAssignment_1; }
		
		//VoidOperation
		public RuleCall getVopsVoidOperationParserRuleCall_1_0() { return cVopsVoidOperationParserRuleCall_1_0; }
		
		//sops=StringOperation
		public Assignment getSopsAssignment_2() { return cSopsAssignment_2; }
		
		//StringOperation
		public RuleCall getSopsStringOperationParserRuleCall_2_0() { return cSopsStringOperationParserRuleCall_2_0; }
	}
	public class BTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTable_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTable_nameIDTerminalRuleCall_0_0 = (RuleCall)cTable_nameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStructKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BTable:
		//	table_name=ID '<:' 'struct' '('
		//	attributes+=Attribute (',' attributes+=Attribute)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//table_name=ID '<:' 'struct' '(' attributes+=Attribute (',' attributes+=Attribute)* ')'
		public Group getGroup() { return cGroup; }
		
		//table_name=ID
		public Assignment getTable_nameAssignment_0() { return cTable_nameAssignment_0; }
		
		//ID
		public RuleCall getTable_nameIDTerminalRuleCall_0_0() { return cTable_nameIDTerminalRuleCall_0_0; }
		
		//'<:'
		public Keyword getLessThanSignColonKeyword_1() { return cLessThanSignColonKeyword_1; }
		
		//'struct'
		public Keyword getStructKeyword_2() { return cStructKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_1_0() { return cAttributesAttributeParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtt_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtt_nameIDTerminalRuleCall_0_0 = (RuleCall)cAtt_nameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//	att_name=ID ':' type=BType;
		@Override public ParserRule getRule() { return rule; }
		
		//att_name=ID ':' type=BType
		public Group getGroup() { return cGroup; }
		
		//att_name=ID
		public Assignment getAtt_nameAssignment_0() { return cAtt_nameAssignment_0; }
		
		//ID
		public RuleCall getAtt_nameIDTerminalRuleCall_0_0() { return cAtt_nameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=BType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BType
		public RuleCall getTypeBTypeParserRuleCall_2_0() { return cTypeBTypeParserRuleCall_2_0; }
	}
	public class BTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BType");
		private final Assignment cType_nameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cType_nameIDTerminalRuleCall_0 = (RuleCall)cType_nameAssignment.eContents().get(0);
		
		//BType:
		//	type_name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type_name=ID
		public Assignment getType_nameAssignment() { return cType_nameAssignment; }
		
		//ID
		public RuleCall getType_nameIDTerminalRuleCall_0() { return cType_nameIDTerminalRuleCall_0; }
	}
	public class BValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cFALSEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTRUEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BValue:
		//	ID | INT | 'FALSE' | 'TRUE';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT | 'FALSE' | 'TRUE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_2() { return cFALSEKeyword_2; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_3() { return cTRUEKeyword_3; }
	}
	public class BoolOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BoolOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResIDTerminalRuleCall_0_0 = (RuleCall)cResAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOp_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp_nameIDTerminalRuleCall_2_0 = (RuleCall)cOp_nameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPListAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPListIDTerminalRuleCall_4_0_0 = (RuleCall)cPListAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPListAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPListIDTerminalRuleCall_4_1_1_0 = (RuleCall)cPListAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPREKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cPTypingAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cPTypingBParameterTypingParserRuleCall_8_0_0 = (RuleCall)cPTypingAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cAmpersandKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cPTypingAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cPTypingBParameterTypingParserRuleCall_8_1_1_0 = (RuleCall)cPTypingAssignment_8_1_1.eContents().get(0);
		private final Keyword cTHENKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cReshasAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cReshasBSubTrueParserRuleCall_10_0_0 = (RuleCall)cReshasAssignment_10_0.eContents().get(0);
		private final Assignment cResnoAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cResnoBSubFalseParserRuleCall_10_1_0 = (RuleCall)cResnoAssignment_10_1.eContents().get(0);
		private final Keyword cENDKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// BSOperation:
		//// 	bop=BoolOperation|
		//// 	vop=VoidOperation;
		//BoolOperation:
		//	res=ID '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
		//	'PRE' (pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*) 'THEN' (reshas=BSubTrue
		//	| resno=BSubFalse)
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//res=ID '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '=' 'PRE' (pTyping+=BParameterTyping ('&'
		//pTyping+=BParameterTyping)*) 'THEN' (reshas=BSubTrue | resno=BSubFalse) 'END'
		public Group getGroup() { return cGroup; }
		
		//res=ID
		public Assignment getResAssignment_0() { return cResAssignment_0; }
		
		//ID
		public RuleCall getResIDTerminalRuleCall_0_0() { return cResIDTerminalRuleCall_0_0; }
		
		//'<--'
		public Keyword getLessThanSignHyphenMinusHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusHyphenMinusKeyword_1; }
		
		//op_name=ID
		public Assignment getOp_nameAssignment_2() { return cOp_nameAssignment_2; }
		
		//ID
		public RuleCall getOp_nameIDTerminalRuleCall_2_0() { return cOp_nameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(pList+=ID (',' pList+=ID)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//pList+=ID
		public Assignment getPListAssignment_4_0() { return cPListAssignment_4_0; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_4_0_0() { return cPListIDTerminalRuleCall_4_0_0; }
		
		//(',' pList+=ID)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//pList+=ID
		public Assignment getPListAssignment_4_1_1() { return cPListAssignment_4_1_1; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_4_1_1_0() { return cPListIDTerminalRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//'PRE'
		public Keyword getPREKeyword_7() { return cPREKeyword_7; }
		
		//(pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*)
		public Group getGroup_8() { return cGroup_8; }
		
		//pTyping+=BParameterTyping
		public Assignment getPTypingAssignment_8_0() { return cPTypingAssignment_8_0; }
		
		//BParameterTyping
		public RuleCall getPTypingBParameterTypingParserRuleCall_8_0_0() { return cPTypingBParameterTypingParserRuleCall_8_0_0; }
		
		//('&' pTyping+=BParameterTyping)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_8_1_0() { return cAmpersandKeyword_8_1_0; }
		
		//pTyping+=BParameterTyping
		public Assignment getPTypingAssignment_8_1_1() { return cPTypingAssignment_8_1_1; }
		
		//BParameterTyping
		public RuleCall getPTypingBParameterTypingParserRuleCall_8_1_1_0() { return cPTypingBParameterTypingParserRuleCall_8_1_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_9() { return cTHENKeyword_9; }
		
		//(reshas=BSubTrue | resno=BSubFalse)
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//reshas=BSubTrue
		public Assignment getReshasAssignment_10_0() { return cReshasAssignment_10_0; }
		
		//BSubTrue
		public RuleCall getReshasBSubTrueParserRuleCall_10_0_0() { return cReshasBSubTrueParserRuleCall_10_0_0; }
		
		//resno=BSubFalse
		public Assignment getResnoAssignment_10_1() { return cResnoAssignment_10_1; }
		
		//BSubFalse
		public RuleCall getResnoBSubFalseParserRuleCall_10_1_0() { return cResnoBSubFalseParserRuleCall_10_1_0; }
		
		//'END'
		public Keyword getENDKeyword_11() { return cENDKeyword_11; }
	}
	public class BSubTrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BSubTrue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResIDTerminalRuleCall_0_0 = (RuleCall)cResAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjTableTableInstanceParserRuleCall_4_0 = (RuleCall)cObjTableAssignment_4.eContents().get(0);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPresAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPresBPredicateParserRuleCall_6_0 = (RuleCall)cPresAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAmpersandKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPresAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPresBPredicateParserRuleCall_7_1_0 = (RuleCall)cPresAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BSubTrue:
		//	res=ID ':=' 'bool(' '#' objTable=TableInstance '&' pres+=BPredicate ('&' pres+=BPredicate)* ')' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//res=ID ':=' 'bool(' '#' objTable=TableInstance '&' pres+=BPredicate ('&' pres+=BPredicate)* ')' ')'
		public Group getGroup() { return cGroup; }
		
		//res=ID
		public Assignment getResAssignment_0() { return cResAssignment_0; }
		
		//ID
		public RuleCall getResIDTerminalRuleCall_0_0() { return cResIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//'bool('
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }
		
		//'#'
		public Keyword getNumberSignKeyword_3() { return cNumberSignKeyword_3; }
		
		//objTable=TableInstance
		public Assignment getObjTableAssignment_4() { return cObjTableAssignment_4; }
		
		//TableInstance
		public RuleCall getObjTableTableInstanceParserRuleCall_4_0() { return cObjTableTableInstanceParserRuleCall_4_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//pres+=BPredicate
		public Assignment getPresAssignment_6() { return cPresAssignment_6; }
		
		//BPredicate
		public RuleCall getPresBPredicateParserRuleCall_6_0() { return cPresBPredicateParserRuleCall_6_0; }
		
		//('&' pres+=BPredicate)*
		public Group getGroup_7() { return cGroup_7; }
		
		//'&'
		public Keyword getAmpersandKeyword_7_0() { return cAmpersandKeyword_7_0; }
		
		//pres+=BPredicate
		public Assignment getPresAssignment_7_1() { return cPresAssignment_7_1; }
		
		//BPredicate
		public RuleCall getPresBPredicateParserRuleCall_7_1_0() { return cPresBPredicateParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class BSubFalseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BSubFalse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResIDTerminalRuleCall_0_0 = (RuleCall)cResAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNotKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cNumberSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cObjTableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cObjTableTableInstanceParserRuleCall_6_0 = (RuleCall)cObjTableAssignment_6.eContents().get(0);
		private final Keyword cAmpersandKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPresAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPresBPredicateParserRuleCall_8_0 = (RuleCall)cPresAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAmpersandKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cPresAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cPresBPredicateParserRuleCall_9_1_0 = (RuleCall)cPresAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//BSubFalse:
		//	res=ID ':=' 'bool(' 'not' '(' '#' objTable=TableInstance '&' pres+=BPredicate ('&' pres+=BPredicate)* ')' ')' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//res=ID ':=' 'bool(' 'not' '(' '#' objTable=TableInstance '&' pres+=BPredicate ('&' pres+=BPredicate)* ')' ')' ')'
		public Group getGroup() { return cGroup; }
		
		//res=ID
		public Assignment getResAssignment_0() { return cResAssignment_0; }
		
		//ID
		public RuleCall getResIDTerminalRuleCall_0_0() { return cResIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//'bool('
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }
		
		//'not'
		public Keyword getNotKeyword_3() { return cNotKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//'#'
		public Keyword getNumberSignKeyword_5() { return cNumberSignKeyword_5; }
		
		//objTable=TableInstance
		public Assignment getObjTableAssignment_6() { return cObjTableAssignment_6; }
		
		//TableInstance
		public RuleCall getObjTableTableInstanceParserRuleCall_6_0() { return cObjTableTableInstanceParserRuleCall_6_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_7() { return cAmpersandKeyword_7; }
		
		//pres+=BPredicate
		public Assignment getPresAssignment_8() { return cPresAssignment_8; }
		
		//BPredicate
		public RuleCall getPresBPredicateParserRuleCall_8_0() { return cPresBPredicateParserRuleCall_8_0; }
		
		//('&' pres+=BPredicate)*
		public Group getGroup_9() { return cGroup_9; }
		
		//'&'
		public Keyword getAmpersandKeyword_9_0() { return cAmpersandKeyword_9_0; }
		
		//pres+=BPredicate
		public Assignment getPresAssignment_9_1() { return cPresAssignment_9_1; }
		
		//BPredicate
		public RuleCall getPresBPredicateParserRuleCall_9_1_0() { return cPresBPredicateParserRuleCall_9_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class StringOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.StringOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cResIDTerminalRuleCall_0_0 = (RuleCall)cResAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOp_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp_nameIDTerminalRuleCall_2_0 = (RuleCall)cOp_nameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPListAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPListIDTerminalRuleCall_4_0_0 = (RuleCall)cPListAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPListAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPListIDTerminalRuleCall_4_1_1_0 = (RuleCall)cPListAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPREKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cPTypingAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cPTypingBParameterTypingParserRuleCall_8_0_0 = (RuleCall)cPTypingAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cAmpersandKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cPTypingAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cPTypingBParameterTypingParserRuleCall_8_1_1_0 = (RuleCall)cPTypingAssignment_8_1_1.eContents().get(0);
		private final Keyword cTHENKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAnyblockAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAnyblockBAnyBlockParserRuleCall_10_0 = (RuleCall)cAnyblockAssignment_10.eContents().get(0);
		private final Keyword cENDKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//StringOperation:
		//	res=ID '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
		//	'PRE' (pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*) 'THEN'
		//	anyblock=BAnyBlock
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//res=ID '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '=' 'PRE' (pTyping+=BParameterTyping ('&'
		//pTyping+=BParameterTyping)*) 'THEN' anyblock=BAnyBlock 'END'
		public Group getGroup() { return cGroup; }
		
		//res=ID
		public Assignment getResAssignment_0() { return cResAssignment_0; }
		
		//ID
		public RuleCall getResIDTerminalRuleCall_0_0() { return cResIDTerminalRuleCall_0_0; }
		
		//'<--'
		public Keyword getLessThanSignHyphenMinusHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusHyphenMinusKeyword_1; }
		
		//op_name=ID
		public Assignment getOp_nameAssignment_2() { return cOp_nameAssignment_2; }
		
		//ID
		public RuleCall getOp_nameIDTerminalRuleCall_2_0() { return cOp_nameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(pList+=ID (',' pList+=ID)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//pList+=ID
		public Assignment getPListAssignment_4_0() { return cPListAssignment_4_0; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_4_0_0() { return cPListIDTerminalRuleCall_4_0_0; }
		
		//(',' pList+=ID)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//pList+=ID
		public Assignment getPListAssignment_4_1_1() { return cPListAssignment_4_1_1; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_4_1_1_0() { return cPListIDTerminalRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//'PRE'
		public Keyword getPREKeyword_7() { return cPREKeyword_7; }
		
		//(pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*)
		public Group getGroup_8() { return cGroup_8; }
		
		//pTyping+=BParameterTyping
		public Assignment getPTypingAssignment_8_0() { return cPTypingAssignment_8_0; }
		
		//BParameterTyping
		public RuleCall getPTypingBParameterTypingParserRuleCall_8_0_0() { return cPTypingBParameterTypingParserRuleCall_8_0_0; }
		
		//('&' pTyping+=BParameterTyping)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_8_1_0() { return cAmpersandKeyword_8_1_0; }
		
		//pTyping+=BParameterTyping
		public Assignment getPTypingAssignment_8_1_1() { return cPTypingAssignment_8_1_1; }
		
		//BParameterTyping
		public RuleCall getPTypingBParameterTypingParserRuleCall_8_1_1_0() { return cPTypingBParameterTypingParserRuleCall_8_1_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_9() { return cTHENKeyword_9; }
		
		//anyblock=BAnyBlock
		public Assignment getAnyblockAssignment_10() { return cAnyblockAssignment_10; }
		
		//BAnyBlock
		public RuleCall getAnyblockBAnyBlockParserRuleCall_10_0() { return cAnyblockBAnyBlockParserRuleCall_10_0; }
		
		//'END'
		public Keyword getENDKeyword_11() { return cENDKeyword_11; }
	}
	public class BAnyBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BAnyBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cANYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVarListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVarListIDTerminalRuleCall_1_0_0 = (RuleCall)cVarListAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cVarListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVarListIDTerminalRuleCall_1_1_1_0 = (RuleCall)cVarListAssignment_1_1_1.eContents().get(0);
		private final Keyword cWHEREKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cVarTypingAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVarTypingBParameterTypingParserRuleCall_3_0_0 = (RuleCall)cVarTypingAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cAmpersandKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cVarTypingAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cVarTypingBParameterTypingParserRuleCall_3_1_1_0 = (RuleCall)cVarTypingAssignment_3_1_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPresAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPresBPredicateParserRuleCall_5_0 = (RuleCall)cPresAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAmpersandKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPresAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPresBPredicateParserRuleCall_6_1_0 = (RuleCall)cPresAssignment_6_1.eContents().get(0);
		private final Keyword cTHENKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cSubsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cSubsBSubstitutionParserRuleCall_8_0_0 = (RuleCall)cSubsAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cSubsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cSubsBSubstitutionParserRuleCall_8_1_1_0 = (RuleCall)cSubsAssignment_8_1_1.eContents().get(0);
		private final Keyword cENDKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BAnyBlock:
		//	'ANY' (varList+=ID (',' varList+=ID)*) 'WHERE' (varTyping+=BParameterTyping ("&" varTyping+=BParameterTyping)*) "&"?
		//	pres+=BPredicate ('&' pres+=BPredicate)*
		//	'THEN' (subs+=BSubstitution ("||" subs+=BSubstitution)*)
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//'ANY' (varList+=ID (',' varList+=ID)*) 'WHERE' (varTyping+=BParameterTyping ("&" varTyping+=BParameterTyping)*) "&"?
		//pres+=BPredicate ('&' pres+=BPredicate)* 'THEN' (subs+=BSubstitution ("||" subs+=BSubstitution)*) 'END'
		public Group getGroup() { return cGroup; }
		
		//'ANY'
		public Keyword getANYKeyword_0() { return cANYKeyword_0; }
		
		//(varList+=ID (',' varList+=ID)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//varList+=ID
		public Assignment getVarListAssignment_1_0() { return cVarListAssignment_1_0; }
		
		//ID
		public RuleCall getVarListIDTerminalRuleCall_1_0_0() { return cVarListIDTerminalRuleCall_1_0_0; }
		
		//(',' varList+=ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//varList+=ID
		public Assignment getVarListAssignment_1_1_1() { return cVarListAssignment_1_1_1; }
		
		//ID
		public RuleCall getVarListIDTerminalRuleCall_1_1_1_0() { return cVarListIDTerminalRuleCall_1_1_1_0; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_2() { return cWHEREKeyword_2; }
		
		//(varTyping+=BParameterTyping ("&" varTyping+=BParameterTyping)*)
		public Group getGroup_3() { return cGroup_3; }
		
		//varTyping+=BParameterTyping
		public Assignment getVarTypingAssignment_3_0() { return cVarTypingAssignment_3_0; }
		
		//BParameterTyping
		public RuleCall getVarTypingBParameterTypingParserRuleCall_3_0_0() { return cVarTypingBParameterTypingParserRuleCall_3_0_0; }
		
		//("&" varTyping+=BParameterTyping)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//"&"
		public Keyword getAmpersandKeyword_3_1_0() { return cAmpersandKeyword_3_1_0; }
		
		//varTyping+=BParameterTyping
		public Assignment getVarTypingAssignment_3_1_1() { return cVarTypingAssignment_3_1_1; }
		
		//BParameterTyping
		public RuleCall getVarTypingBParameterTypingParserRuleCall_3_1_1_0() { return cVarTypingBParameterTypingParserRuleCall_3_1_1_0; }
		
		//"&"?
		public Keyword getAmpersandKeyword_4() { return cAmpersandKeyword_4; }
		
		//pres+=BPredicate
		public Assignment getPresAssignment_5() { return cPresAssignment_5; }
		
		//BPredicate
		public RuleCall getPresBPredicateParserRuleCall_5_0() { return cPresBPredicateParserRuleCall_5_0; }
		
		//('&' pres+=BPredicate)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'&'
		public Keyword getAmpersandKeyword_6_0() { return cAmpersandKeyword_6_0; }
		
		//pres+=BPredicate
		public Assignment getPresAssignment_6_1() { return cPresAssignment_6_1; }
		
		//BPredicate
		public RuleCall getPresBPredicateParserRuleCall_6_1_0() { return cPresBPredicateParserRuleCall_6_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_7() { return cTHENKeyword_7; }
		
		//(subs+=BSubstitution ("||" subs+=BSubstitution)*)
		public Group getGroup_8() { return cGroup_8; }
		
		//subs+=BSubstitution
		public Assignment getSubsAssignment_8_0() { return cSubsAssignment_8_0; }
		
		//BSubstitution
		public RuleCall getSubsBSubstitutionParserRuleCall_8_0_0() { return cSubsBSubstitutionParserRuleCall_8_0_0; }
		
		//("||" subs+=BSubstitution)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_8_1_0() { return cVerticalLineVerticalLineKeyword_8_1_0; }
		
		//subs+=BSubstitution
		public Assignment getSubsAssignment_8_1_1() { return cSubsAssignment_8_1_1; }
		
		//BSubstitution
		public RuleCall getSubsBSubstitutionParserRuleCall_8_1_1_0() { return cSubsBSubstitutionParserRuleCall_8_1_1_0; }
		
		//'END'
		public Keyword getENDKeyword_9() { return cENDKeyword_9; }
	}
	public class VoidOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.VoidOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp_nameIDTerminalRuleCall_0_0 = (RuleCall)cOp_nameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPListIDTerminalRuleCall_2_0_0 = (RuleCall)cPListAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPListIDTerminalRuleCall_2_1_1_0 = (RuleCall)cPListAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cPREKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cPTypingAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cPTypingBParameterTypingParserRuleCall_6_0_0 = (RuleCall)cPTypingAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cAmpersandKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cPTypingAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cPTypingBParameterTypingParserRuleCall_6_1_1_0 = (RuleCall)cPTypingAssignment_6_1_1.eContents().get(0);
		private final Keyword cTHENKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSubsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSubsBSubstitutionParserRuleCall_8_0 = (RuleCall)cSubsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cVerticalLineVerticalLineKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cSubsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cSubsBSubstitutionParserRuleCall_9_1_0 = (RuleCall)cSubsAssignment_9_1.eContents().get(0);
		private final Keyword cENDKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//VoidOperation:
		//	op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
		//	'PRE' (pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*) 'THEN'
		//	subs+=BSubstitution ('||' subs+=BSubstitution)*
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '=' 'PRE' (pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*)
		//'THEN' subs+=BSubstitution ('||' subs+=BSubstitution)* 'END'
		public Group getGroup() { return cGroup; }
		
		//op_name=ID
		public Assignment getOp_nameAssignment_0() { return cOp_nameAssignment_0; }
		
		//ID
		public RuleCall getOp_nameIDTerminalRuleCall_0_0() { return cOp_nameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(pList+=ID (',' pList+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//pList+=ID
		public Assignment getPListAssignment_2_0() { return cPListAssignment_2_0; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_2_0_0() { return cPListIDTerminalRuleCall_2_0_0; }
		
		//(',' pList+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//pList+=ID
		public Assignment getPListAssignment_2_1_1() { return cPListAssignment_2_1_1; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_2_1_1_0() { return cPListIDTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'PRE'
		public Keyword getPREKeyword_5() { return cPREKeyword_5; }
		
		//(pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*)
		public Group getGroup_6() { return cGroup_6; }
		
		//pTyping+=BParameterTyping
		public Assignment getPTypingAssignment_6_0() { return cPTypingAssignment_6_0; }
		
		//BParameterTyping
		public RuleCall getPTypingBParameterTypingParserRuleCall_6_0_0() { return cPTypingBParameterTypingParserRuleCall_6_0_0; }
		
		//('&' pTyping+=BParameterTyping)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_6_1_0() { return cAmpersandKeyword_6_1_0; }
		
		//pTyping+=BParameterTyping
		public Assignment getPTypingAssignment_6_1_1() { return cPTypingAssignment_6_1_1; }
		
		//BParameterTyping
		public RuleCall getPTypingBParameterTypingParserRuleCall_6_1_1_0() { return cPTypingBParameterTypingParserRuleCall_6_1_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_7() { return cTHENKeyword_7; }
		
		//subs+=BSubstitution
		public Assignment getSubsAssignment_8() { return cSubsAssignment_8; }
		
		//BSubstitution
		public RuleCall getSubsBSubstitutionParserRuleCall_8_0() { return cSubsBSubstitutionParserRuleCall_8_0; }
		
		//('||' subs+=BSubstitution)*
		public Group getGroup_9() { return cGroup_9; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_9_0() { return cVerticalLineVerticalLineKeyword_9_0; }
		
		//subs+=BSubstitution
		public Assignment getSubsAssignment_9_1() { return cSubsAssignment_9_1; }
		
		//BSubstitution
		public RuleCall getSubsBSubstitutionParserRuleCall_9_1_0() { return cSubsBSubstitutionParserRuleCall_9_1_0; }
		
		//'END'
		public Keyword getENDKeyword_10() { return cENDKeyword_10; }
	}
	public class BPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPLeftAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPLeftSQLCallParserRuleCall_1_0_0 = (RuleCall)cPLeftAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPRightBValueParserRuleCall_1_2_0 = (RuleCall)cPRightAssignment_1_2.eContents().get(0);
		
		//BPredicate:
		//	{BPredicate} (PLeft=SQLCall '=' PRight=BValue);
		@Override public ParserRule getRule() { return rule; }
		
		//{BPredicate} (PLeft=SQLCall '=' PRight=BValue)
		public Group getGroup() { return cGroup; }
		
		//{BPredicate}
		public Action getBPredicateAction_0() { return cBPredicateAction_0; }
		
		//(PLeft=SQLCall '=' PRight=BValue)
		public Group getGroup_1() { return cGroup_1; }
		
		//PLeft=SQLCall
		public Assignment getPLeftAssignment_1_0() { return cPLeftAssignment_1_0; }
		
		//SQLCall
		public RuleCall getPLeftSQLCallParserRuleCall_1_0_0() { return cPLeftSQLCallParserRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//PRight=BValue
		public Assignment getPRightAssignment_1_2() { return cPRightAssignment_1_2; }
		
		//BValue
		public RuleCall getPRightBValueParserRuleCall_1_2_0() { return cPRightBValueParserRuleCall_1_2_0; }
	}
	public class SQLCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.SQLCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSLeftIDTerminalRuleCall_0_0 = (RuleCall)cSLeftAssignment_0.eContents().get(0);
		private final Keyword cApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSRightIDTerminalRuleCall_2_0 = (RuleCall)cSRightAssignment_2.eContents().get(0);
		
		//SQLCall:
		//	SLeft=ID "'" SRight=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//SLeft=ID "'" SRight=ID
		public Group getGroup() { return cGroup; }
		
		//SLeft=ID
		public Assignment getSLeftAssignment_0() { return cSLeftAssignment_0; }
		
		//ID
		public RuleCall getSLeftIDTerminalRuleCall_0_0() { return cSLeftIDTerminalRuleCall_0_0; }
		
		//"'"
		public Keyword getApostropheKeyword_1() { return cApostropheKeyword_1; }
		
		//SRight=ID
		public Assignment getSRightAssignment_2() { return cSRightAssignment_2; }
		
		//ID
		public RuleCall getSRightIDTerminalRuleCall_2_0() { return cSRightIDTerminalRuleCall_2_0; }
	}
	public class TableInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.TableInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTi_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTi_nameIDTerminalRuleCall_0_0 = (RuleCall)cTi_nameAssignment_0.eContents().get(0);
		private final Keyword cFullStopLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTi_typeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTi_typeTIAssignmentParserRuleCall_2_0 = (RuleCall)cTi_typeAssignment_2.eContents().get(0);
		
		//TableInstance:
		//	ti_name=ID '.(' ti_type=TIAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//ti_name=ID '.(' ti_type=TIAssignment
		public Group getGroup() { return cGroup; }
		
		//ti_name=ID
		public Assignment getTi_nameAssignment_0() { return cTi_nameAssignment_0; }
		
		//ID
		public RuleCall getTi_nameIDTerminalRuleCall_0_0() { return cTi_nameIDTerminalRuleCall_0_0; }
		
		//'.('
		public Keyword getFullStopLeftParenthesisKeyword_1() { return cFullStopLeftParenthesisKeyword_1; }
		
		//ti_type=TIAssignment
		public Assignment getTi_typeAssignment_2() { return cTi_typeAssignment_2; }
		
		//TIAssignment
		public RuleCall getTi_typeTIAssignmentParserRuleCall_2_0() { return cTi_typeTIAssignmentParserRuleCall_2_0; }
	}
	public class TIAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.TIAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstance_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstance_nameIDTerminalRuleCall_0_0 = (RuleCall)cInstance_nameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstance_typeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstance_typeIDTerminalRuleCall_2_0 = (RuleCall)cInstance_typeAssignment_2.eContents().get(0);
		
		//TIAssignment:
		//	instance_name=ID ':' instance_type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//instance_name=ID ':' instance_type=ID
		public Group getGroup() { return cGroup; }
		
		//instance_name=ID
		public Assignment getInstance_nameAssignment_0() { return cInstance_nameAssignment_0; }
		
		//ID
		public RuleCall getInstance_nameIDTerminalRuleCall_0_0() { return cInstance_nameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//instance_type=ID
		public Assignment getInstance_typeAssignment_2() { return cInstance_typeAssignment_2; }
		
		//ID
		public RuleCall getInstance_typeIDTerminalRuleCall_2_0() { return cInstance_typeIDTerminalRuleCall_2_0; }
	}
	public class BParameterTypingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BParameterTyping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cP_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cP_nameIDTerminalRuleCall_0_0 = (RuleCall)cP_nameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//BParameterTyping:
		//	p_name=ID ':' type=BType;
		@Override public ParserRule getRule() { return rule; }
		
		//p_name=ID ':' type=BType
		public Group getGroup() { return cGroup; }
		
		//p_name=ID
		public Assignment getP_nameAssignment_0() { return cP_nameAssignment_0; }
		
		//ID
		public RuleCall getP_nameIDTerminalRuleCall_0_0() { return cP_nameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=BType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BType
		public RuleCall getTypeBTypeParserRuleCall_2_0() { return cTypeBTypeParserRuleCall_2_0; }
	}
	public class BSubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BSubstitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftIDTerminalRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cPrightAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cPrightBPredicateParserRuleCall_2_0_0 = (RuleCall)cPrightAssignment_2_0.eContents().get(0);
		private final Assignment cUrightAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cUrightBUnionParserRuleCall_2_1_0 = (RuleCall)cUrightAssignment_2_1.eContents().get(0);
		private final Assignment cSrightAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cSrightSQLCallParserRuleCall_2_2_0 = (RuleCall)cSrightAssignment_2_2.eContents().get(0);
		
		//BSubstitution:
		//	left=ID ':=' (pright=BPredicate | uright=BUnion | sright=SQLCall);
		@Override public ParserRule getRule() { return rule; }
		
		//left=ID ':=' (pright=BPredicate | uright=BUnion | sright=SQLCall)
		public Group getGroup() { return cGroup; }
		
		//left=ID
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ID
		public RuleCall getLeftIDTerminalRuleCall_0_0() { return cLeftIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//(pright=BPredicate | uright=BUnion | sright=SQLCall)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//pright=BPredicate
		public Assignment getPrightAssignment_2_0() { return cPrightAssignment_2_0; }
		
		//BPredicate
		public RuleCall getPrightBPredicateParserRuleCall_2_0_0() { return cPrightBPredicateParserRuleCall_2_0_0; }
		
		//uright=BUnion
		public Assignment getUrightAssignment_2_1() { return cUrightAssignment_2_1; }
		
		//BUnion
		public RuleCall getUrightBUnionParserRuleCall_2_1_0() { return cUrightBUnionParserRuleCall_2_1_0; }
		
		//sright=SQLCall
		public Assignment getSrightAssignment_2_2() { return cSrightAssignment_2_2; }
		
		//SQLCall
		public RuleCall getSrightSQLCallParserRuleCall_2_2_0() { return cSrightSQLCallParserRuleCall_2_2_0; }
	}
	public class BUnionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BUnion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSetBSetParserRuleCall_0_0 = (RuleCall)cSetAssignment_0.eContents().get(0);
		private final Keyword cReverseSolidusSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAddedSetAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cAddedSetBSetParserRuleCall_2_0_0 = (RuleCall)cAddedSetAssignment_2_0.eContents().get(0);
		private final Assignment cAddedEAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAddedEBElementStructureParserRuleCall_2_1_0 = (RuleCall)cAddedEAssignment_2_1.eContents().get(0);
		
		//BUnion:
		//	set=BSet '\\/' (addedSet=BSet | addedE=BElementStructure);
		@Override public ParserRule getRule() { return rule; }
		
		//set=BSet '\\/' (addedSet=BSet | addedE=BElementStructure)
		public Group getGroup() { return cGroup; }
		
		//set=BSet
		public Assignment getSetAssignment_0() { return cSetAssignment_0; }
		
		//BSet
		public RuleCall getSetBSetParserRuleCall_0_0() { return cSetBSetParserRuleCall_0_0; }
		
		//'\\/'
		public Keyword getReverseSolidusSolidusKeyword_1() { return cReverseSolidusSolidusKeyword_1; }
		
		//(addedSet=BSet | addedE=BElementStructure)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//addedSet=BSet
		public Assignment getAddedSetAssignment_2_0() { return cAddedSetAssignment_2_0; }
		
		//BSet
		public RuleCall getAddedSetBSetParserRuleCall_2_0_0() { return cAddedSetBSetParserRuleCall_2_0_0; }
		
		//addedE=BElementStructure
		public Assignment getAddedEAssignment_2_1() { return cAddedEAssignment_2_1; }
		
		//BElementStructure
		public RuleCall getAddedEBElementStructureParserRuleCall_2_1_0() { return cAddedEBElementStructureParserRuleCall_2_1_0; }
	}
	public class BElementStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BElementStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRecKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEBElementParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEBElementParserRuleCall_3_1_0 = (RuleCall)cEAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BElementStructure:
		//	'{' 'rec(' e+=BElement (',' e+=BElement)* ')}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' 'rec(' e+=BElement (',' e+=BElement)* ')}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'rec('
		public Keyword getRecKeyword_1() { return cRecKeyword_1; }
		
		//e+=BElement
		public Assignment getEAssignment_2() { return cEAssignment_2; }
		
		//BElement
		public RuleCall getEBElementParserRuleCall_2_0() { return cEBElementParserRuleCall_2_0; }
		
		//(',' e+=BElement)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//e+=BElement
		public Assignment getEAssignment_3_1() { return cEAssignment_3_1; }
		
		//BElement
		public RuleCall getEBElementParserRuleCall_3_1_0() { return cEBElementParserRuleCall_3_1_0; }
		
		//')}'
		public Keyword getRightParenthesisRightCurlyBracketKeyword_4() { return cRightParenthesisRightCurlyBracketKeyword_4; }
	}
	public class BElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BElement");
		private final Assignment cEnameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_0 = (RuleCall)cEnameAssignment.eContents().get(0);
		
		//BElement:
		//	ename=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ename=ID
		public Assignment getEnameAssignment() { return cEnameAssignment; }
		
		//ID
		public RuleCall getEnameIDTerminalRuleCall_0() { return cEnameIDTerminalRuleCall_0; }
	}
	public class BSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.BSet");
		private final Assignment cSet_nameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSet_nameIDTerminalRuleCall_0 = (RuleCall)cSet_nameAssignment.eContents().get(0);
		
		//BSet:
		//	set_name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//set_name=ID
		public Assignment getSet_nameAssignment() { return cSet_nameAssignment; }
		
		//ID
		public RuleCall getSet_nameIDTerminalRuleCall_0() { return cSet_nameIDTerminalRuleCall_0; }
	}
	
	
	private final BSQL2Java2Elements pBSQL2Java2;
	private final TerminalRule tSTRING;
	private final BSQLMachineElements pBSQLMachine;
	private final BOperationElements pBOperation;
	private final BTableElements pBTable;
	private final AttributeElements pAttribute;
	private final BTypeElements pBType;
	private final BValueElements pBValue;
	private final BoolOperationElements pBoolOperation;
	private final BSubTrueElements pBSubTrue;
	private final BSubFalseElements pBSubFalse;
	private final StringOperationElements pStringOperation;
	private final BAnyBlockElements pBAnyBlock;
	private final VoidOperationElements pVoidOperation;
	private final BPredicateElements pBPredicate;
	private final SQLCallElements pSQLCall;
	private final TableInstanceElements pTableInstance;
	private final TIAssignmentElements pTIAssignment;
	private final BParameterTypingElements pBParameterTyping;
	private final BSubstitutionElements pBSubstitution;
	private final BUnionElements pBUnion;
	private final BElementStructureElements pBElementStructure;
	private final BElementElements pBElement;
	private final BSetElements pBSet;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BSQL2Java2GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBSQL2Java2 = new BSQL2Java2Elements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java2.STRING");
		this.pBSQLMachine = new BSQLMachineElements();
		this.pBOperation = new BOperationElements();
		this.pBTable = new BTableElements();
		this.pAttribute = new AttributeElements();
		this.pBType = new BTypeElements();
		this.pBValue = new BValueElements();
		this.pBoolOperation = new BoolOperationElements();
		this.pBSubTrue = new BSubTrueElements();
		this.pBSubFalse = new BSubFalseElements();
		this.pStringOperation = new StringOperationElements();
		this.pBAnyBlock = new BAnyBlockElements();
		this.pVoidOperation = new VoidOperationElements();
		this.pBPredicate = new BPredicateElements();
		this.pSQLCall = new SQLCallElements();
		this.pTableInstance = new TableInstanceElements();
		this.pTIAssignment = new TIAssignmentElements();
		this.pBParameterTyping = new BParameterTypingElements();
		this.pBSubstitution = new BSubstitutionElements();
		this.pBUnion = new BUnionElements();
		this.pBElementStructure = new BElementStructureElements();
		this.pBElement = new BElementElements();
		this.pBSet = new BSetElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("bsql2java.BSQL2Java2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BSQL2Java2:
	//	BSQLMachine;
	public BSQL2Java2Elements getBSQL2Java2Access() {
		return pBSQL2Java2;
	}
	
	public ParserRule getBSQL2Java2Rule() {
		return getBSQL2Java2Access().getRule();
	}
	
	//terminal STRING:
	//	'#'
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//BSQLMachine:
	//	'MACHINE' m_name=ID ('SEES' seename+=ID ("," seename+=ID)*)?
	//	'VARIABLES' vars=ID
	//	'INVARIANT'
	//	inv=BTable
	//	'INITIALISATION'
	//	init=ID ':=' '{}'
	//	'OPERATIONS'
	//	bops+=BOperation (';' bops+=BOperation)*
	//	"END";
	public BSQLMachineElements getBSQLMachineAccess() {
		return pBSQLMachine;
	}
	
	public ParserRule getBSQLMachineRule() {
		return getBSQLMachineAccess().getRule();
	}
	
	//BOperation:
	//	bops=BoolOperation
	//	| vops=VoidOperation
	//	| sops=StringOperation;
	public BOperationElements getBOperationAccess() {
		return pBOperation;
	}
	
	public ParserRule getBOperationRule() {
		return getBOperationAccess().getRule();
	}
	
	//BTable:
	//	table_name=ID '<:' 'struct' '('
	//	attributes+=Attribute (',' attributes+=Attribute)*
	//	')';
	public BTableElements getBTableAccess() {
		return pBTable;
	}
	
	public ParserRule getBTableRule() {
		return getBTableAccess().getRule();
	}
	
	//Attribute:
	//	att_name=ID ':' type=BType;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//BType:
	//	type_name=ID;
	public BTypeElements getBTypeAccess() {
		return pBType;
	}
	
	public ParserRule getBTypeRule() {
		return getBTypeAccess().getRule();
	}
	
	//BValue:
	//	ID | INT | 'FALSE' | 'TRUE';
	public BValueElements getBValueAccess() {
		return pBValue;
	}
	
	public ParserRule getBValueRule() {
		return getBValueAccess().getRule();
	}
	
	//// BSOperation:
	//// 	bop=BoolOperation|
	//// 	vop=VoidOperation;
	//BoolOperation:
	//	res=ID '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
	//	'PRE' (pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*) 'THEN' (reshas=BSubTrue
	//	| resno=BSubFalse)
	//	'END';
	public BoolOperationElements getBoolOperationAccess() {
		return pBoolOperation;
	}
	
	public ParserRule getBoolOperationRule() {
		return getBoolOperationAccess().getRule();
	}
	
	//BSubTrue:
	//	res=ID ':=' 'bool(' '#' objTable=TableInstance '&' pres+=BPredicate ('&' pres+=BPredicate)* ')' ')';
	public BSubTrueElements getBSubTrueAccess() {
		return pBSubTrue;
	}
	
	public ParserRule getBSubTrueRule() {
		return getBSubTrueAccess().getRule();
	}
	
	//BSubFalse:
	//	res=ID ':=' 'bool(' 'not' '(' '#' objTable=TableInstance '&' pres+=BPredicate ('&' pres+=BPredicate)* ')' ')' ')';
	public BSubFalseElements getBSubFalseAccess() {
		return pBSubFalse;
	}
	
	public ParserRule getBSubFalseRule() {
		return getBSubFalseAccess().getRule();
	}
	
	//StringOperation:
	//	res=ID '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
	//	'PRE' (pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*) 'THEN'
	//	anyblock=BAnyBlock
	//	'END';
	public StringOperationElements getStringOperationAccess() {
		return pStringOperation;
	}
	
	public ParserRule getStringOperationRule() {
		return getStringOperationAccess().getRule();
	}
	
	//BAnyBlock:
	//	'ANY' (varList+=ID (',' varList+=ID)*) 'WHERE' (varTyping+=BParameterTyping ("&" varTyping+=BParameterTyping)*) "&"?
	//	pres+=BPredicate ('&' pres+=BPredicate)*
	//	'THEN' (subs+=BSubstitution ("||" subs+=BSubstitution)*)
	//	'END';
	public BAnyBlockElements getBAnyBlockAccess() {
		return pBAnyBlock;
	}
	
	public ParserRule getBAnyBlockRule() {
		return getBAnyBlockAccess().getRule();
	}
	
	//VoidOperation:
	//	op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
	//	'PRE' (pTyping+=BParameterTyping ('&' pTyping+=BParameterTyping)*) 'THEN'
	//	subs+=BSubstitution ('||' subs+=BSubstitution)*
	//	'END';
	public VoidOperationElements getVoidOperationAccess() {
		return pVoidOperation;
	}
	
	public ParserRule getVoidOperationRule() {
		return getVoidOperationAccess().getRule();
	}
	
	//BPredicate:
	//	{BPredicate} (PLeft=SQLCall '=' PRight=BValue);
	public BPredicateElements getBPredicateAccess() {
		return pBPredicate;
	}
	
	public ParserRule getBPredicateRule() {
		return getBPredicateAccess().getRule();
	}
	
	//SQLCall:
	//	SLeft=ID "'" SRight=ID;
	public SQLCallElements getSQLCallAccess() {
		return pSQLCall;
	}
	
	public ParserRule getSQLCallRule() {
		return getSQLCallAccess().getRule();
	}
	
	//TableInstance:
	//	ti_name=ID '.(' ti_type=TIAssignment;
	public TableInstanceElements getTableInstanceAccess() {
		return pTableInstance;
	}
	
	public ParserRule getTableInstanceRule() {
		return getTableInstanceAccess().getRule();
	}
	
	//TIAssignment:
	//	instance_name=ID ':' instance_type=ID;
	public TIAssignmentElements getTIAssignmentAccess() {
		return pTIAssignment;
	}
	
	public ParserRule getTIAssignmentRule() {
		return getTIAssignmentAccess().getRule();
	}
	
	//BParameterTyping:
	//	p_name=ID ':' type=BType;
	public BParameterTypingElements getBParameterTypingAccess() {
		return pBParameterTyping;
	}
	
	public ParserRule getBParameterTypingRule() {
		return getBParameterTypingAccess().getRule();
	}
	
	//BSubstitution:
	//	left=ID ':=' (pright=BPredicate | uright=BUnion | sright=SQLCall);
	public BSubstitutionElements getBSubstitutionAccess() {
		return pBSubstitution;
	}
	
	public ParserRule getBSubstitutionRule() {
		return getBSubstitutionAccess().getRule();
	}
	
	//BUnion:
	//	set=BSet '\\/' (addedSet=BSet | addedE=BElementStructure);
	public BUnionElements getBUnionAccess() {
		return pBUnion;
	}
	
	public ParserRule getBUnionRule() {
		return getBUnionAccess().getRule();
	}
	
	//BElementStructure:
	//	'{' 'rec(' e+=BElement (',' e+=BElement)* ')}';
	public BElementStructureElements getBElementStructureAccess() {
		return pBElementStructure;
	}
	
	public ParserRule getBElementStructureRule() {
		return getBElementStructureAccess().getRule();
	}
	
	//BElement:
	//	ename=ID;
	public BElementElements getBElementAccess() {
		return pBElement;
	}
	
	public ParserRule getBElementRule() {
		return getBElementAccess().getRule();
	}
	
	//BSet:
	//	set_name=ID;
	public BSetElements getBSetAccess() {
		return pBSet;
	}
	
	public ParserRule getBSetRule() {
		return getBSetAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
