/*
 * generated by Xtext 2.10.0
 */
package secureuml2Java.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SecureUML2JavaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SecureUML2JavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.SecureUML2Java");
		private final RuleCall cBMachineParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SecureUML2Java:
		//	BMachine;
		@Override public ParserRule getRule() { return rule; }
		
		//BMachine
		public RuleCall getBMachineParserRuleCall() { return cBMachineParserRuleCall; }
	}
	public class BMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMACHINEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cM_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cM_nameIDTerminalRuleCall_1_0 = (RuleCall)cM_nameAssignment_1.eContents().get(0);
		private final Keyword cSEESKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSeesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSeesBSeesParserRuleCall_3_0 = (RuleCall)cSeesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSeesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSeesBSeesParserRuleCall_4_1_0 = (RuleCall)cSeesAssignment_4_1.eContents().get(0);
		private final Keyword cVARIABLESKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVarsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVarsBVariableParserRuleCall_6_0 = (RuleCall)cVarsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVarsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVarsBVariableParserRuleCall_7_1_0 = (RuleCall)cVarsAssignment_7_1.eContents().get(0);
		private final Keyword cINVARIANTKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cInvsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cInvsBInvariantParserRuleCall_9_0 = (RuleCall)cInvsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAmpersandKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cInvsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cInvsBInvariantParserRuleCall_10_1_0 = (RuleCall)cInvsAssignment_10_1.eContents().get(0);
		private final Keyword cINITIALISATIONKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cInitsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cInitsBInitParserRuleCall_12_0 = (RuleCall)cInitsAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cVerticalLineVerticalLineKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cInitsAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cInitsBInitParserRuleCall_13_1_0 = (RuleCall)cInitsAssignment_13_1.eContents().get(0);
		private final Keyword cOPERATIONSKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cVopsAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cVopsVoidOperationParserRuleCall_15_0 = (RuleCall)cVopsAssignment_15.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cSemicolonKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cVopsAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cVopsVoidOperationParserRuleCall_16_1_0 = (RuleCall)cVopsAssignment_16_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cSopsAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cSopsStringOperationParserRuleCall_18_0 = (RuleCall)cSopsAssignment_18.eContents().get(0);
		private final Group cGroup_19 = (Group)cGroup.eContents().get(19);
		private final Keyword cSemicolonKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final Assignment cSopsAssignment_19_1 = (Assignment)cGroup_19.eContents().get(1);
		private final RuleCall cSopsStringOperationParserRuleCall_19_1_0 = (RuleCall)cSopsAssignment_19_1.eContents().get(0);
		private final Keyword cENDKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//BMachine:
		//	'MACHINE' m_name=ID
		//	'SEES'
		//	sees+=BSees (',' sees+=BSees)*
		//	'VARIABLES'
		//	vars+=BVariable (',' vars+=BVariable)*
		//	'INVARIANT'
		//	invs+=BInvariant ('&' invs+=BInvariant)*
		//	'INITIALISATION'
		//	inits+=BInit ('||' inits+=BInit)*
		//	'OPERATIONS'
		//	vops+=VoidOperation (';' vops+=VoidOperation)* ';'
		//	sops+=StringOperation (';' sops+=StringOperation)*
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//'MACHINE' m_name=ID 'SEES' sees+=BSees (',' sees+=BSees)* 'VARIABLES' vars+=BVariable (',' vars+=BVariable)* 'INVARIANT'
		//invs+=BInvariant ('&' invs+=BInvariant)* 'INITIALISATION' inits+=BInit ('||' inits+=BInit)* 'OPERATIONS'
		//vops+=VoidOperation (';' vops+=VoidOperation)* ';' sops+=StringOperation (';' sops+=StringOperation)* 'END'
		public Group getGroup() { return cGroup; }
		
		//'MACHINE'
		public Keyword getMACHINEKeyword_0() { return cMACHINEKeyword_0; }
		
		//m_name=ID
		public Assignment getM_nameAssignment_1() { return cM_nameAssignment_1; }
		
		//ID
		public RuleCall getM_nameIDTerminalRuleCall_1_0() { return cM_nameIDTerminalRuleCall_1_0; }
		
		//'SEES'
		public Keyword getSEESKeyword_2() { return cSEESKeyword_2; }
		
		//sees+=BSees
		public Assignment getSeesAssignment_3() { return cSeesAssignment_3; }
		
		//BSees
		public RuleCall getSeesBSeesParserRuleCall_3_0() { return cSeesBSeesParserRuleCall_3_0; }
		
		//(',' sees+=BSees)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//sees+=BSees
		public Assignment getSeesAssignment_4_1() { return cSeesAssignment_4_1; }
		
		//BSees
		public RuleCall getSeesBSeesParserRuleCall_4_1_0() { return cSeesBSeesParserRuleCall_4_1_0; }
		
		//'VARIABLES'
		public Keyword getVARIABLESKeyword_5() { return cVARIABLESKeyword_5; }
		
		//vars+=BVariable
		public Assignment getVarsAssignment_6() { return cVarsAssignment_6; }
		
		//BVariable
		public RuleCall getVarsBVariableParserRuleCall_6_0() { return cVarsBVariableParserRuleCall_6_0; }
		
		//(',' vars+=BVariable)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//vars+=BVariable
		public Assignment getVarsAssignment_7_1() { return cVarsAssignment_7_1; }
		
		//BVariable
		public RuleCall getVarsBVariableParserRuleCall_7_1_0() { return cVarsBVariableParserRuleCall_7_1_0; }
		
		//'INVARIANT'
		public Keyword getINVARIANTKeyword_8() { return cINVARIANTKeyword_8; }
		
		//invs+=BInvariant
		public Assignment getInvsAssignment_9() { return cInvsAssignment_9; }
		
		//BInvariant
		public RuleCall getInvsBInvariantParserRuleCall_9_0() { return cInvsBInvariantParserRuleCall_9_0; }
		
		//('&' invs+=BInvariant)*
		public Group getGroup_10() { return cGroup_10; }
		
		//'&'
		public Keyword getAmpersandKeyword_10_0() { return cAmpersandKeyword_10_0; }
		
		//invs+=BInvariant
		public Assignment getInvsAssignment_10_1() { return cInvsAssignment_10_1; }
		
		//BInvariant
		public RuleCall getInvsBInvariantParserRuleCall_10_1_0() { return cInvsBInvariantParserRuleCall_10_1_0; }
		
		//'INITIALISATION'
		public Keyword getINITIALISATIONKeyword_11() { return cINITIALISATIONKeyword_11; }
		
		//inits+=BInit
		public Assignment getInitsAssignment_12() { return cInitsAssignment_12; }
		
		//BInit
		public RuleCall getInitsBInitParserRuleCall_12_0() { return cInitsBInitParserRuleCall_12_0; }
		
		//('||' inits+=BInit)*
		public Group getGroup_13() { return cGroup_13; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_13_0() { return cVerticalLineVerticalLineKeyword_13_0; }
		
		//inits+=BInit
		public Assignment getInitsAssignment_13_1() { return cInitsAssignment_13_1; }
		
		//BInit
		public RuleCall getInitsBInitParserRuleCall_13_1_0() { return cInitsBInitParserRuleCall_13_1_0; }
		
		//'OPERATIONS'
		public Keyword getOPERATIONSKeyword_14() { return cOPERATIONSKeyword_14; }
		
		//vops+=VoidOperation
		public Assignment getVopsAssignment_15() { return cVopsAssignment_15; }
		
		//VoidOperation
		public RuleCall getVopsVoidOperationParserRuleCall_15_0() { return cVopsVoidOperationParserRuleCall_15_0; }
		
		//(';' vops+=VoidOperation)*
		public Group getGroup_16() { return cGroup_16; }
		
		//';'
		public Keyword getSemicolonKeyword_16_0() { return cSemicolonKeyword_16_0; }
		
		//vops+=VoidOperation
		public Assignment getVopsAssignment_16_1() { return cVopsAssignment_16_1; }
		
		//VoidOperation
		public RuleCall getVopsVoidOperationParserRuleCall_16_1_0() { return cVopsVoidOperationParserRuleCall_16_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_17() { return cSemicolonKeyword_17; }
		
		//sops+=StringOperation
		public Assignment getSopsAssignment_18() { return cSopsAssignment_18; }
		
		//StringOperation
		public RuleCall getSopsStringOperationParserRuleCall_18_0() { return cSopsStringOperationParserRuleCall_18_0; }
		
		//(';' sops+=StringOperation)*
		public Group getGroup_19() { return cGroup_19; }
		
		//';'
		public Keyword getSemicolonKeyword_19_0() { return cSemicolonKeyword_19_0; }
		
		//sops+=StringOperation
		public Assignment getSopsAssignment_19_1() { return cSopsAssignment_19_1; }
		
		//StringOperation
		public RuleCall getSopsStringOperationParserRuleCall_19_1_0() { return cSopsStringOperationParserRuleCall_19_1_0; }
		
		//'END'
		public Keyword getENDKeyword_20() { return cENDKeyword_20; }
	}
	public class VoidOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.VoidOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp_nameIDTerminalRuleCall_0_0 = (RuleCall)cOp_nameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPListIDTerminalRuleCall_2_0_0 = (RuleCall)cPListAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPListIDTerminalRuleCall_2_1_1_0 = (RuleCall)cPListAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cPREKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParamsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParamsBParameterParserRuleCall_6_0_0 = (RuleCall)cParamsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cAmpersandKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParamsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParamsBParameterParserRuleCall_6_1_1_0 = (RuleCall)cParamsAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAmpersandKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPreAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPreBPredicateParserRuleCall_7_1_0 = (RuleCall)cPreAssignment_7_1.eContents().get(0);
		private final Keyword cTHENKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSubsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSubsBSubstitutionParserRuleCall_9_0 = (RuleCall)cSubsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cVerticalLineVerticalLineKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cSubsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cSubsBSubstitutionParserRuleCall_10_1_0 = (RuleCall)cSubsAssignment_10_1.eContents().get(0);
		private final Keyword cENDKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//VoidOperation:
		//	op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
		//	'PRE' (params+=BParameter ('&' params+=BParameter)*) ('&' pre+=BPredicate)*
		//	'THEN'
		//	subs+=BSubstitution ('||' subs+=BSubstitution)*
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '=' 'PRE' (params+=BParameter ('&' params+=BParameter)*) ('&'
		//pre+=BPredicate)* 'THEN' subs+=BSubstitution ('||' subs+=BSubstitution)* 'END'
		public Group getGroup() { return cGroup; }
		
		//op_name=ID
		public Assignment getOp_nameAssignment_0() { return cOp_nameAssignment_0; }
		
		//ID
		public RuleCall getOp_nameIDTerminalRuleCall_0_0() { return cOp_nameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(pList+=ID (',' pList+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//pList+=ID
		public Assignment getPListAssignment_2_0() { return cPListAssignment_2_0; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_2_0_0() { return cPListIDTerminalRuleCall_2_0_0; }
		
		//(',' pList+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//pList+=ID
		public Assignment getPListAssignment_2_1_1() { return cPListAssignment_2_1_1; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_2_1_1_0() { return cPListIDTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'PRE'
		public Keyword getPREKeyword_5() { return cPREKeyword_5; }
		
		//(params+=BParameter ('&' params+=BParameter)*)
		public Group getGroup_6() { return cGroup_6; }
		
		//params+=BParameter
		public Assignment getParamsAssignment_6_0() { return cParamsAssignment_6_0; }
		
		//BParameter
		public RuleCall getParamsBParameterParserRuleCall_6_0_0() { return cParamsBParameterParserRuleCall_6_0_0; }
		
		//('&' params+=BParameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_6_1_0() { return cAmpersandKeyword_6_1_0; }
		
		//params+=BParameter
		public Assignment getParamsAssignment_6_1_1() { return cParamsAssignment_6_1_1; }
		
		//BParameter
		public RuleCall getParamsBParameterParserRuleCall_6_1_1_0() { return cParamsBParameterParserRuleCall_6_1_1_0; }
		
		//('&' pre+=BPredicate)*
		public Group getGroup_7() { return cGroup_7; }
		
		//'&'
		public Keyword getAmpersandKeyword_7_0() { return cAmpersandKeyword_7_0; }
		
		//pre+=BPredicate
		public Assignment getPreAssignment_7_1() { return cPreAssignment_7_1; }
		
		//BPredicate
		public RuleCall getPreBPredicateParserRuleCall_7_1_0() { return cPreBPredicateParserRuleCall_7_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_8() { return cTHENKeyword_8; }
		
		//subs+=BSubstitution
		public Assignment getSubsAssignment_9() { return cSubsAssignment_9; }
		
		//BSubstitution
		public RuleCall getSubsBSubstitutionParserRuleCall_9_0() { return cSubsBSubstitutionParserRuleCall_9_0; }
		
		//('||' subs+=BSubstitution)*
		public Group getGroup_10() { return cGroup_10; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_10_0() { return cVerticalLineVerticalLineKeyword_10_0; }
		
		//subs+=BSubstitution
		public Assignment getSubsAssignment_10_1() { return cSubsAssignment_10_1; }
		
		//BSubstitution
		public RuleCall getSubsBSubstitutionParserRuleCall_10_1_0() { return cSubsBSubstitutionParserRuleCall_10_1_0; }
		
		//'END'
		public Keyword getENDKeyword_11() { return cENDKeyword_11; }
	}
	public class StringOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.StringOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRes1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRes1IDTerminalRuleCall_0_0 = (RuleCall)cRes1Assignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOp_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp_nameIDTerminalRuleCall_2_0 = (RuleCall)cOp_nameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPListAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPListIDTerminalRuleCall_4_0_0 = (RuleCall)cPListAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPListAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPListIDTerminalRuleCall_4_1_1_0 = (RuleCall)cPListAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPREKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cParamsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cParamsBParameterParserRuleCall_8_0_0 = (RuleCall)cParamsAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cAmpersandKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cParamsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cParamsBParameterParserRuleCall_8_1_1_0 = (RuleCall)cParamsAssignment_8_1_1.eContents().get(0);
		private final Keyword cTHENKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cIFKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPres1Assignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPres1BPredicateParserRuleCall_11_0 = (RuleCall)cPres1Assignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cAmpersandKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cPres1Assignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cPres1BPredicateParserRuleCall_12_1_0 = (RuleCall)cPres1Assignment_12_1.eContents().get(0);
		private final Keyword cTHENKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cIFKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cPres2Assignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cPres2BPredicateParserRuleCall_15_0 = (RuleCall)cPres2Assignment_15.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cAmpersandKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cPres2Assignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cPres2BPredicateParserRuleCall_16_1_0 = (RuleCall)cPres2Assignment_16_1.eContents().get(0);
		private final Keyword cTHENKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cSubifAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cSubifBSubstitutionParserRuleCall_18_0 = (RuleCall)cSubifAssignment_18.eContents().get(0);
		private final Keyword cELSEKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cSubelse2Assignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cSubelse2BSubstitutionParserRuleCall_20_0 = (RuleCall)cSubelse2Assignment_20.eContents().get(0);
		private final Keyword cENDKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Keyword cELSEKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Assignment cSubelse1Assignment_23 = (Assignment)cGroup.eContents().get(23);
		private final RuleCall cSubelse1BSubstitutionParserRuleCall_23_0 = (RuleCall)cSubelse1Assignment_23.eContents().get(0);
		private final Keyword cENDKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Keyword cENDKeyword_25 = (Keyword)cGroup.eContents().get(25);
		
		//StringOperation:
		//	res1=ID '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
		//	'PRE' (params+=BParameter ('&' params+=BParameter)*) 'THEN'
		//	'IF' pres1+=BPredicate ('&' pres1+=BPredicate)* 'THEN'
		//	'IF' pres2+=BPredicate ('&' pres2+=BPredicate)* 'THEN'
		//	subif=BSubstitution
		//	'ELSE'
		//	subelse2=BSubstitution
		//	'END'
		//	'ELSE'
		//	subelse1=BSubstitution
		//	'END'
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//res1=ID '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '=' 'PRE' (params+=BParameter ('&' params+=BParameter)*)
		//'THEN' 'IF' pres1+=BPredicate ('&' pres1+=BPredicate)* 'THEN' 'IF' pres2+=BPredicate ('&' pres2+=BPredicate)* 'THEN'
		//subif=BSubstitution 'ELSE' subelse2=BSubstitution 'END' 'ELSE' subelse1=BSubstitution 'END' 'END'
		public Group getGroup() { return cGroup; }
		
		//res1=ID
		public Assignment getRes1Assignment_0() { return cRes1Assignment_0; }
		
		//ID
		public RuleCall getRes1IDTerminalRuleCall_0_0() { return cRes1IDTerminalRuleCall_0_0; }
		
		//'<--'
		public Keyword getLessThanSignHyphenMinusHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusHyphenMinusKeyword_1; }
		
		//op_name=ID
		public Assignment getOp_nameAssignment_2() { return cOp_nameAssignment_2; }
		
		//ID
		public RuleCall getOp_nameIDTerminalRuleCall_2_0() { return cOp_nameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(pList+=ID (',' pList+=ID)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//pList+=ID
		public Assignment getPListAssignment_4_0() { return cPListAssignment_4_0; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_4_0_0() { return cPListIDTerminalRuleCall_4_0_0; }
		
		//(',' pList+=ID)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//pList+=ID
		public Assignment getPListAssignment_4_1_1() { return cPListAssignment_4_1_1; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_4_1_1_0() { return cPListIDTerminalRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//'PRE'
		public Keyword getPREKeyword_7() { return cPREKeyword_7; }
		
		//(params+=BParameter ('&' params+=BParameter)*)
		public Group getGroup_8() { return cGroup_8; }
		
		//params+=BParameter
		public Assignment getParamsAssignment_8_0() { return cParamsAssignment_8_0; }
		
		//BParameter
		public RuleCall getParamsBParameterParserRuleCall_8_0_0() { return cParamsBParameterParserRuleCall_8_0_0; }
		
		//('&' params+=BParameter)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_8_1_0() { return cAmpersandKeyword_8_1_0; }
		
		//params+=BParameter
		public Assignment getParamsAssignment_8_1_1() { return cParamsAssignment_8_1_1; }
		
		//BParameter
		public RuleCall getParamsBParameterParserRuleCall_8_1_1_0() { return cParamsBParameterParserRuleCall_8_1_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_9() { return cTHENKeyword_9; }
		
		//'IF'
		public Keyword getIFKeyword_10() { return cIFKeyword_10; }
		
		//pres1+=BPredicate
		public Assignment getPres1Assignment_11() { return cPres1Assignment_11; }
		
		//BPredicate
		public RuleCall getPres1BPredicateParserRuleCall_11_0() { return cPres1BPredicateParserRuleCall_11_0; }
		
		//('&' pres1+=BPredicate)*
		public Group getGroup_12() { return cGroup_12; }
		
		//'&'
		public Keyword getAmpersandKeyword_12_0() { return cAmpersandKeyword_12_0; }
		
		//pres1+=BPredicate
		public Assignment getPres1Assignment_12_1() { return cPres1Assignment_12_1; }
		
		//BPredicate
		public RuleCall getPres1BPredicateParserRuleCall_12_1_0() { return cPres1BPredicateParserRuleCall_12_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_13() { return cTHENKeyword_13; }
		
		//'IF'
		public Keyword getIFKeyword_14() { return cIFKeyword_14; }
		
		//pres2+=BPredicate
		public Assignment getPres2Assignment_15() { return cPres2Assignment_15; }
		
		//BPredicate
		public RuleCall getPres2BPredicateParserRuleCall_15_0() { return cPres2BPredicateParserRuleCall_15_0; }
		
		//('&' pres2+=BPredicate)*
		public Group getGroup_16() { return cGroup_16; }
		
		//'&'
		public Keyword getAmpersandKeyword_16_0() { return cAmpersandKeyword_16_0; }
		
		//pres2+=BPredicate
		public Assignment getPres2Assignment_16_1() { return cPres2Assignment_16_1; }
		
		//BPredicate
		public RuleCall getPres2BPredicateParserRuleCall_16_1_0() { return cPres2BPredicateParserRuleCall_16_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_17() { return cTHENKeyword_17; }
		
		//subif=BSubstitution
		public Assignment getSubifAssignment_18() { return cSubifAssignment_18; }
		
		//BSubstitution
		public RuleCall getSubifBSubstitutionParserRuleCall_18_0() { return cSubifBSubstitutionParserRuleCall_18_0; }
		
		//'ELSE'
		public Keyword getELSEKeyword_19() { return cELSEKeyword_19; }
		
		//subelse2=BSubstitution
		public Assignment getSubelse2Assignment_20() { return cSubelse2Assignment_20; }
		
		//BSubstitution
		public RuleCall getSubelse2BSubstitutionParserRuleCall_20_0() { return cSubelse2BSubstitutionParserRuleCall_20_0; }
		
		//'END'
		public Keyword getENDKeyword_21() { return cENDKeyword_21; }
		
		//'ELSE'
		public Keyword getELSEKeyword_22() { return cELSEKeyword_22; }
		
		//subelse1=BSubstitution
		public Assignment getSubelse1Assignment_23() { return cSubelse1Assignment_23; }
		
		//BSubstitution
		public RuleCall getSubelse1BSubstitutionParserRuleCall_23_0() { return cSubelse1BSubstitutionParserRuleCall_23_0; }
		
		//'END'
		public Keyword getENDKeyword_24() { return cENDKeyword_24; }
		
		//'END'
		public Keyword getENDKeyword_25() { return cENDKeyword_25; }
	}
	public class BSubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BSubstitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSleftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSleftAlternatives_0_0 = (Alternatives)cSleftAssignment_0.eContents().get(0);
		private final RuleCall cSleftBTypeParserRuleCall_0_0_0 = (RuleCall)cSleftAlternatives_0_0.eContents().get(0);
		private final RuleCall cSleftBOperationCallParserRuleCall_0_0_1 = (RuleCall)cSleftAlternatives_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSrightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSrightIDTerminalRuleCall_2_0 = (RuleCall)cSrightAssignment_2.eContents().get(0);
		
		//BSubstitution:
		//	sleft=(BType | BOperationCall) ':=' sright=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//sleft=(BType | BOperationCall) ':=' sright=ID
		public Group getGroup() { return cGroup; }
		
		//sleft=(BType | BOperationCall)
		public Assignment getSleftAssignment_0() { return cSleftAssignment_0; }
		
		//(BType | BOperationCall)
		public Alternatives getSleftAlternatives_0_0() { return cSleftAlternatives_0_0; }
		
		//BType
		public RuleCall getSleftBTypeParserRuleCall_0_0_0() { return cSleftBTypeParserRuleCall_0_0_0; }
		
		//BOperationCall
		public RuleCall getSleftBOperationCallParserRuleCall_0_0_1() { return cSleftBOperationCallParserRuleCall_0_0_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//sright=ID
		public Assignment getSrightAssignment_2() { return cSrightAssignment_2; }
		
		//ID
		public RuleCall getSrightIDTerminalRuleCall_2_0() { return cSrightIDTerminalRuleCall_2_0; }
	}
	public class BPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPleftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPleftAlternatives_0_0 = (Alternatives)cPleftAssignment_0.eContents().get(0);
		private final RuleCall cPleftBTypeParserRuleCall_0_0_0 = (RuleCall)cPleftAlternatives_0_0.eContents().get(0);
		private final RuleCall cPleftBTupleParserRuleCall_0_0_1 = (RuleCall)cPleftAlternatives_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPrightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPrightAlternatives_2_0 = (Alternatives)cPrightAssignment_2.eContents().get(0);
		private final RuleCall cPrightBDomParserRuleCall_2_0_0 = (RuleCall)cPrightAlternatives_2_0.eContents().get(0);
		private final RuleCall cPrightBTypeParserRuleCall_2_0_1 = (RuleCall)cPrightAlternatives_2_0.eContents().get(1);
		
		//BPredicate:
		//	pleft=(BType | BTuple) ':' pright=(BDom | BType);
		@Override public ParserRule getRule() { return rule; }
		
		//pleft=(BType | BTuple) ':' pright=(BDom | BType)
		public Group getGroup() { return cGroup; }
		
		//pleft=(BType | BTuple)
		public Assignment getPleftAssignment_0() { return cPleftAssignment_0; }
		
		//(BType | BTuple)
		public Alternatives getPleftAlternatives_0_0() { return cPleftAlternatives_0_0; }
		
		//BType
		public RuleCall getPleftBTypeParserRuleCall_0_0_0() { return cPleftBTypeParserRuleCall_0_0_0; }
		
		//BTuple
		public RuleCall getPleftBTupleParserRuleCall_0_0_1() { return cPleftBTupleParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//pright=(BDom | BType)
		public Assignment getPrightAssignment_2() { return cPrightAssignment_2; }
		
		//(BDom | BType)
		public Alternatives getPrightAlternatives_2_0() { return cPrightAlternatives_2_0; }
		
		//BDom
		public RuleCall getPrightBDomParserRuleCall_2_0_0() { return cPrightBDomParserRuleCall_2_0_0; }
		
		//BType
		public RuleCall getPrightBTypeParserRuleCall_2_0_1() { return cPrightBTypeParserRuleCall_2_0_1; }
	}
	public class BDomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BDom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjBTypeParserRuleCall_2_0 = (RuleCall)cObjAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BDom:
		//	'dom' '(' obj=BType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'dom' '(' obj=BType ')'
		public Group getGroup() { return cGroup; }
		
		//'dom'
		public Keyword getDomKeyword_0() { return cDomKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//obj=BType
		public Assignment getObjAssignment_2() { return cObjAssignment_2; }
		
		//BType
		public RuleCall getObjBTypeParserRuleCall_2_0() { return cObjBTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cP_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cP_nameIDTerminalRuleCall_0_0 = (RuleCall)cP_nameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//BParameter:
		//	p_name=ID ':' type=BType;
		@Override public ParserRule getRule() { return rule; }
		
		//p_name=ID ':' type=BType
		public Group getGroup() { return cGroup; }
		
		//p_name=ID
		public Assignment getP_nameAssignment_0() { return cP_nameAssignment_0; }
		
		//ID
		public RuleCall getP_nameIDTerminalRuleCall_0_0() { return cP_nameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=BType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BType
		public RuleCall getTypeBTypeParserRuleCall_2_0() { return cTypeBTypeParserRuleCall_2_0; }
	}
	public class BTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BType");
		private final Assignment cType_nameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cType_nameIDTerminalRuleCall_0 = (RuleCall)cType_nameAssignment.eContents().get(0);
		
		//BType:
		//	type_name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type_name=ID
		public Assignment getType_nameAssignment() { return cType_nameAssignment; }
		
		//ID
		public RuleCall getType_nameIDTerminalRuleCall_0() { return cType_nameIDTerminalRuleCall_0; }
	}
	public class BInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPairAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPairBTupleParserRuleCall_3_0 = (RuleCall)cPairAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BInit:
		//	var=ID ':=' '{' pair+=BTuple '}';
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID ':=' '{' pair+=BTuple '}'
		public Group getGroup() { return cGroup; }
		
		//var=ID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0() { return cVarIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//pair+=BTuple
		public Assignment getPairAssignment_3() { return cPairAssignment_3; }
		
		//BTuple
		public RuleCall getPairBTupleParserRuleCall_3_0() { return cPairBTupleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRanAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cRanAlternatives_0_0 = (Alternatives)cRanAssignment_0.eContents().get(0);
		private final RuleCall cRanBTypeParserRuleCall_0_0_0 = (RuleCall)cRanAlternatives_0_0.eContents().get(0);
		private final RuleCall cRanBOperationCallParserRuleCall_0_0_1 = (RuleCall)cRanAlternatives_0_0.eContents().get(1);
		private final Keyword cVerticalLineHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomIDTerminalRuleCall_2_0 = (RuleCall)cDomAssignment_2.eContents().get(0);
		
		//BTuple:
		//	ran=(BType | BOperationCall) '|->' dom=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ran=(BType | BOperationCall) '|->' dom=ID
		public Group getGroup() { return cGroup; }
		
		//ran=(BType | BOperationCall)
		public Assignment getRanAssignment_0() { return cRanAssignment_0; }
		
		//(BType | BOperationCall)
		public Alternatives getRanAlternatives_0_0() { return cRanAlternatives_0_0; }
		
		//BType
		public RuleCall getRanBTypeParserRuleCall_0_0_0() { return cRanBTypeParserRuleCall_0_0_0; }
		
		//BOperationCall
		public RuleCall getRanBOperationCallParserRuleCall_0_0_1() { return cRanBOperationCallParserRuleCall_0_0_1; }
		
		//'|->'
		public Keyword getVerticalLineHyphenMinusGreaterThanSignKeyword_1() { return cVerticalLineHyphenMinusGreaterThanSignKeyword_1; }
		
		//dom=ID
		public Assignment getDomAssignment_2() { return cDomAssignment_2; }
		
		//ID
		public RuleCall getDomIDTerminalRuleCall_2_0() { return cDomIDTerminalRuleCall_2_0; }
	}
	public class BOperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BOperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpIDTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParIDTerminalRuleCall_2_0 = (RuleCall)cParAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BOperationCall:
		//	op=ID '(' par=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//op=ID '(' par=ID ')'
		public Group getGroup() { return cGroup; }
		
		//op=ID
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//ID
		public RuleCall getOpIDTerminalRuleCall_0_0() { return cOpIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//par=ID
		public Assignment getParAssignment_2() { return cParAssignment_2; }
		
		//ID
		public RuleCall getParIDTerminalRuleCall_2_0() { return cParIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BInvariant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0_0 = (RuleCall)cVarAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVardifAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cVardifBFunctionParserRuleCall_0_2_0 = (RuleCall)cVardifAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDomAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDomIDTerminalRuleCall_1_0_0 = (RuleCall)cDomAssignment_1_0.eContents().get(0);
		private final Keyword cLessThanSignColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRanAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRanIDTerminalRuleCall_1_2_0 = (RuleCall)cRanAssignment_1_2.eContents().get(0);
		
		//BInvariant:
		//	var=ID ':' vardif=BFunction
		//	| dom=ID '<:' ran=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID ':' vardif=BFunction | dom=ID '<:' ran=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=ID ':' vardif=BFunction
		public Group getGroup_0() { return cGroup_0; }
		
		//var=ID
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0_0() { return cVarIDTerminalRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//vardif=BFunction
		public Assignment getVardifAssignment_0_2() { return cVardifAssignment_0_2; }
		
		//BFunction
		public RuleCall getVardifBFunctionParserRuleCall_0_2_0() { return cVardifBFunctionParserRuleCall_0_2_0; }
		
		//dom=ID '<:' ran=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//dom=ID
		public Assignment getDomAssignment_1_0() { return cDomAssignment_1_0; }
		
		//ID
		public RuleCall getDomIDTerminalRuleCall_1_0_0() { return cDomIDTerminalRuleCall_1_0_0; }
		
		//'<:'
		public Keyword getLessThanSignColonKeyword_1_1() { return cLessThanSignColonKeyword_1_1; }
		
		//ran=ID
		public Assignment getRanAssignment_1_2() { return cRanAssignment_1_2; }
		
		//ID
		public RuleCall getRanIDTerminalRuleCall_1_2_0() { return cRanIDTerminalRuleCall_1_2_0; }
	}
	public class BFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRanAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRanIDTerminalRuleCall_0_0 = (RuleCall)cRanAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cPlusSignHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cDomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomIDTerminalRuleCall_2_0 = (RuleCall)cDomAssignment_2.eContents().get(0);
		
		//BFunction:
		//	ran=ID ('-->' | '+->' | '<->') dom=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ran=ID ('-->' | '+->' | '<->') dom=ID
		public Group getGroup() { return cGroup; }
		
		//ran=ID
		public Assignment getRanAssignment_0() { return cRanAssignment_0; }
		
		//ID
		public RuleCall getRanIDTerminalRuleCall_0_0() { return cRanIDTerminalRuleCall_0_0; }
		
		//('-->' | '+->' | '<->')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//'+->'
		public Keyword getPlusSignHyphenMinusGreaterThanSignKeyword_1_1() { return cPlusSignHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_1_2() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_1_2; }
		
		//dom=ID
		public Assignment getDomAssignment_2() { return cDomAssignment_2; }
		
		//ID
		public RuleCall getDomIDTerminalRuleCall_2_0() { return cDomIDTerminalRuleCall_2_0; }
	}
	public class BVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BVariable");
		private final Assignment cVar_nameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVar_nameIDTerminalRuleCall_0 = (RuleCall)cVar_nameAssignment.eContents().get(0);
		
		//BVariable:
		//	var_name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//var_name=ID
		public Assignment getVar_nameAssignment() { return cVar_nameAssignment; }
		
		//ID
		public RuleCall getVar_nameIDTerminalRuleCall_0() { return cVar_nameIDTerminalRuleCall_0; }
	}
	public class BSeesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2Java.SecureUML2Java.BSees");
		private final Assignment cM_nameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cM_nameIDTerminalRuleCall_0 = (RuleCall)cM_nameAssignment.eContents().get(0);
		
		//BSees:
		//	m_name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//m_name=ID
		public Assignment getM_nameAssignment() { return cM_nameAssignment; }
		
		//ID
		public RuleCall getM_nameIDTerminalRuleCall_0() { return cM_nameIDTerminalRuleCall_0; }
	}
	
	
	private final SecureUML2JavaElements pSecureUML2Java;
	private final BMachineElements pBMachine;
	private final VoidOperationElements pVoidOperation;
	private final StringOperationElements pStringOperation;
	private final BSubstitutionElements pBSubstitution;
	private final BPredicateElements pBPredicate;
	private final BDomElements pBDom;
	private final BParameterElements pBParameter;
	private final BTypeElements pBType;
	private final BInitElements pBInit;
	private final BTupleElements pBTuple;
	private final BOperationCallElements pBOperationCall;
	private final BInvariantElements pBInvariant;
	private final BFunctionElements pBFunction;
	private final BVariableElements pBVariable;
	private final BSeesElements pBSees;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SecureUML2JavaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSecureUML2Java = new SecureUML2JavaElements();
		this.pBMachine = new BMachineElements();
		this.pVoidOperation = new VoidOperationElements();
		this.pStringOperation = new StringOperationElements();
		this.pBSubstitution = new BSubstitutionElements();
		this.pBPredicate = new BPredicateElements();
		this.pBDom = new BDomElements();
		this.pBParameter = new BParameterElements();
		this.pBType = new BTypeElements();
		this.pBInit = new BInitElements();
		this.pBTuple = new BTupleElements();
		this.pBOperationCall = new BOperationCallElements();
		this.pBInvariant = new BInvariantElements();
		this.pBFunction = new BFunctionElements();
		this.pBVariable = new BVariableElements();
		this.pBSees = new BSeesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("secureuml2Java.SecureUML2Java".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SecureUML2Java:
	//	BMachine;
	public SecureUML2JavaElements getSecureUML2JavaAccess() {
		return pSecureUML2Java;
	}
	
	public ParserRule getSecureUML2JavaRule() {
		return getSecureUML2JavaAccess().getRule();
	}
	
	//BMachine:
	//	'MACHINE' m_name=ID
	//	'SEES'
	//	sees+=BSees (',' sees+=BSees)*
	//	'VARIABLES'
	//	vars+=BVariable (',' vars+=BVariable)*
	//	'INVARIANT'
	//	invs+=BInvariant ('&' invs+=BInvariant)*
	//	'INITIALISATION'
	//	inits+=BInit ('||' inits+=BInit)*
	//	'OPERATIONS'
	//	vops+=VoidOperation (';' vops+=VoidOperation)* ';'
	//	sops+=StringOperation (';' sops+=StringOperation)*
	//	'END';
	public BMachineElements getBMachineAccess() {
		return pBMachine;
	}
	
	public ParserRule getBMachineRule() {
		return getBMachineAccess().getRule();
	}
	
	//VoidOperation:
	//	op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
	//	'PRE' (params+=BParameter ('&' params+=BParameter)*) ('&' pre+=BPredicate)*
	//	'THEN'
	//	subs+=BSubstitution ('||' subs+=BSubstitution)*
	//	'END';
	public VoidOperationElements getVoidOperationAccess() {
		return pVoidOperation;
	}
	
	public ParserRule getVoidOperationRule() {
		return getVoidOperationAccess().getRule();
	}
	
	//StringOperation:
	//	res1=ID '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
	//	'PRE' (params+=BParameter ('&' params+=BParameter)*) 'THEN'
	//	'IF' pres1+=BPredicate ('&' pres1+=BPredicate)* 'THEN'
	//	'IF' pres2+=BPredicate ('&' pres2+=BPredicate)* 'THEN'
	//	subif=BSubstitution
	//	'ELSE'
	//	subelse2=BSubstitution
	//	'END'
	//	'ELSE'
	//	subelse1=BSubstitution
	//	'END'
	//	'END';
	public StringOperationElements getStringOperationAccess() {
		return pStringOperation;
	}
	
	public ParserRule getStringOperationRule() {
		return getStringOperationAccess().getRule();
	}
	
	//BSubstitution:
	//	sleft=(BType | BOperationCall) ':=' sright=ID;
	public BSubstitutionElements getBSubstitutionAccess() {
		return pBSubstitution;
	}
	
	public ParserRule getBSubstitutionRule() {
		return getBSubstitutionAccess().getRule();
	}
	
	//BPredicate:
	//	pleft=(BType | BTuple) ':' pright=(BDom | BType);
	public BPredicateElements getBPredicateAccess() {
		return pBPredicate;
	}
	
	public ParserRule getBPredicateRule() {
		return getBPredicateAccess().getRule();
	}
	
	//BDom:
	//	'dom' '(' obj=BType ')';
	public BDomElements getBDomAccess() {
		return pBDom;
	}
	
	public ParserRule getBDomRule() {
		return getBDomAccess().getRule();
	}
	
	//BParameter:
	//	p_name=ID ':' type=BType;
	public BParameterElements getBParameterAccess() {
		return pBParameter;
	}
	
	public ParserRule getBParameterRule() {
		return getBParameterAccess().getRule();
	}
	
	//BType:
	//	type_name=ID;
	public BTypeElements getBTypeAccess() {
		return pBType;
	}
	
	public ParserRule getBTypeRule() {
		return getBTypeAccess().getRule();
	}
	
	//BInit:
	//	var=ID ':=' '{' pair+=BTuple '}';
	public BInitElements getBInitAccess() {
		return pBInit;
	}
	
	public ParserRule getBInitRule() {
		return getBInitAccess().getRule();
	}
	
	//BTuple:
	//	ran=(BType | BOperationCall) '|->' dom=ID;
	public BTupleElements getBTupleAccess() {
		return pBTuple;
	}
	
	public ParserRule getBTupleRule() {
		return getBTupleAccess().getRule();
	}
	
	//BOperationCall:
	//	op=ID '(' par=ID ')';
	public BOperationCallElements getBOperationCallAccess() {
		return pBOperationCall;
	}
	
	public ParserRule getBOperationCallRule() {
		return getBOperationCallAccess().getRule();
	}
	
	//BInvariant:
	//	var=ID ':' vardif=BFunction
	//	| dom=ID '<:' ran=ID;
	public BInvariantElements getBInvariantAccess() {
		return pBInvariant;
	}
	
	public ParserRule getBInvariantRule() {
		return getBInvariantAccess().getRule();
	}
	
	//BFunction:
	//	ran=ID ('-->' | '+->' | '<->') dom=ID;
	public BFunctionElements getBFunctionAccess() {
		return pBFunction;
	}
	
	public ParserRule getBFunctionRule() {
		return getBFunctionAccess().getRule();
	}
	
	//BVariable:
	//	var_name=ID;
	public BVariableElements getBVariableAccess() {
		return pBVariable;
	}
	
	public ParserRule getBVariableRule() {
		return getBVariableAccess().getRule();
	}
	
	//BSees:
	//	m_name=ID;
	public BSeesElements getBSeesAccess() {
		return pBSees;
	}
	
	public ParserRule getBSeesRule() {
		return getBSeesAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
