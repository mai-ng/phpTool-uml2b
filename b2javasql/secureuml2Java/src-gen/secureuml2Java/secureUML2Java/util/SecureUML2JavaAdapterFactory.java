/**
 * generated by Xtext 2.10.0
 */
package secureuml2Java.secureUML2Java.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import secureuml2Java.secureUML2Java.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see secureuml2Java.secureUML2Java.SecureUML2JavaPackage
 * @generated
 */
public class SecureUML2JavaAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SecureUML2JavaPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SecureUML2JavaAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SecureUML2JavaPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SecureUML2JavaSwitch<Adapter> modelSwitch =
    new SecureUML2JavaSwitch<Adapter>()
    {
      @Override
      public Adapter caseSecureUML2Java(SecureUML2Java object)
      {
        return createSecureUML2JavaAdapter();
      }
      @Override
      public Adapter caseBMachine(BMachine object)
      {
        return createBMachineAdapter();
      }
      @Override
      public Adapter caseVoidOperation(VoidOperation object)
      {
        return createVoidOperationAdapter();
      }
      @Override
      public Adapter caseStringOperation(StringOperation object)
      {
        return createStringOperationAdapter();
      }
      @Override
      public Adapter caseBSubstitution(BSubstitution object)
      {
        return createBSubstitutionAdapter();
      }
      @Override
      public Adapter caseBPredicate(BPredicate object)
      {
        return createBPredicateAdapter();
      }
      @Override
      public Adapter caseBDom(BDom object)
      {
        return createBDomAdapter();
      }
      @Override
      public Adapter caseBParameter(BParameter object)
      {
        return createBParameterAdapter();
      }
      @Override
      public Adapter caseBType(BType object)
      {
        return createBTypeAdapter();
      }
      @Override
      public Adapter caseBInit(BInit object)
      {
        return createBInitAdapter();
      }
      @Override
      public Adapter caseBTuple(BTuple object)
      {
        return createBTupleAdapter();
      }
      @Override
      public Adapter caseBOperationCall(BOperationCall object)
      {
        return createBOperationCallAdapter();
      }
      @Override
      public Adapter caseBInvariant(BInvariant object)
      {
        return createBInvariantAdapter();
      }
      @Override
      public Adapter caseBFunction(BFunction object)
      {
        return createBFunctionAdapter();
      }
      @Override
      public Adapter caseBVariable(BVariable object)
      {
        return createBVariableAdapter();
      }
      @Override
      public Adapter caseBSees(BSees object)
      {
        return createBSeesAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.SecureUML2Java <em>Secure UML2 Java</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.SecureUML2Java
   * @generated
   */
  public Adapter createSecureUML2JavaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BMachine <em>BMachine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BMachine
   * @generated
   */
  public Adapter createBMachineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.VoidOperation <em>Void Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.VoidOperation
   * @generated
   */
  public Adapter createVoidOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.StringOperation <em>String Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.StringOperation
   * @generated
   */
  public Adapter createStringOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BSubstitution <em>BSubstitution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BSubstitution
   * @generated
   */
  public Adapter createBSubstitutionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BPredicate <em>BPredicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BPredicate
   * @generated
   */
  public Adapter createBPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BDom <em>BDom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BDom
   * @generated
   */
  public Adapter createBDomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BParameter <em>BParameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BParameter
   * @generated
   */
  public Adapter createBParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BType <em>BType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BType
   * @generated
   */
  public Adapter createBTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BInit <em>BInit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BInit
   * @generated
   */
  public Adapter createBInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BTuple <em>BTuple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BTuple
   * @generated
   */
  public Adapter createBTupleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BOperationCall <em>BOperation Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BOperationCall
   * @generated
   */
  public Adapter createBOperationCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BInvariant <em>BInvariant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BInvariant
   * @generated
   */
  public Adapter createBInvariantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BFunction <em>BFunction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BFunction
   * @generated
   */
  public Adapter createBFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BVariable <em>BVariable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BVariable
   * @generated
   */
  public Adapter createBVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link secureuml2Java.secureUML2Java.BSees <em>BSees</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see secureuml2Java.secureUML2Java.BSees
   * @generated
   */
  public Adapter createBSeesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SecureUML2JavaAdapterFactory
