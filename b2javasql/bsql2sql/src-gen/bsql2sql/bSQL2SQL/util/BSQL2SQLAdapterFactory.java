/**
 * generated by Xtext 2.10.0
 */
package bsql2sql.bSQL2SQL.util;

import bsql2sql.bSQL2SQL.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see bsql2sql.bSQL2SQL.BSQL2SQLPackage
 * @generated
 */
public class BSQL2SQLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BSQL2SQLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BSQL2SQLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BSQL2SQLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BSQL2SQLSwitch<Adapter> modelSwitch =
    new BSQL2SQLSwitch<Adapter>()
    {
      @Override
      public Adapter caseBSQL2SQL(BSQL2SQL object)
      {
        return createBSQL2SQLAdapter();
      }
      @Override
      public Adapter caseBSQLMachine(BSQLMachine object)
      {
        return createBSQLMachineAdapter();
      }
      @Override
      public Adapter caseBTable(BTable object)
      {
        return createBTableAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseBType(BType object)
      {
        return createBTypeAdapter();
      }
      @Override
      public Adapter caseBSOperation(BSOperation object)
      {
        return createBSOperationAdapter();
      }
      @Override
      public Adapter caseBoolOperation(BoolOperation object)
      {
        return createBoolOperationAdapter();
      }
      @Override
      public Adapter caseVoidOperation(VoidOperation object)
      {
        return createVoidOperationAdapter();
      }
      @Override
      public Adapter caseBPredicate(BPredicate object)
      {
        return createBPredicateAdapter();
      }
      @Override
      public Adapter caseSQLCall(SQLCall object)
      {
        return createSQLCallAdapter();
      }
      @Override
      public Adapter caseTableInstance(TableInstance object)
      {
        return createTableInstanceAdapter();
      }
      @Override
      public Adapter caseTIAssignment(TIAssignment object)
      {
        return createTIAssignmentAdapter();
      }
      @Override
      public Adapter caseBParameter(BParameter object)
      {
        return createBParameterAdapter();
      }
      @Override
      public Adapter caseBSubstitution(BSubstitution object)
      {
        return createBSubstitutionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.BSQL2SQL <em>BSQL2SQL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.BSQL2SQL
   * @generated
   */
  public Adapter createBSQL2SQLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.BSQLMachine <em>BSQL Machine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.BSQLMachine
   * @generated
   */
  public Adapter createBSQLMachineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.BTable <em>BTable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.BTable
   * @generated
   */
  public Adapter createBTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.BType <em>BType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.BType
   * @generated
   */
  public Adapter createBTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.BSOperation <em>BS Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.BSOperation
   * @generated
   */
  public Adapter createBSOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.BoolOperation <em>Bool Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.BoolOperation
   * @generated
   */
  public Adapter createBoolOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.VoidOperation <em>Void Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.VoidOperation
   * @generated
   */
  public Adapter createVoidOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.BPredicate <em>BPredicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.BPredicate
   * @generated
   */
  public Adapter createBPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.SQLCall <em>SQL Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.SQLCall
   * @generated
   */
  public Adapter createSQLCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.TableInstance <em>Table Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.TableInstance
   * @generated
   */
  public Adapter createTableInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.TIAssignment <em>TI Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.TIAssignment
   * @generated
   */
  public Adapter createTIAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.BParameter <em>BParameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.BParameter
   * @generated
   */
  public Adapter createBParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link bsql2sql.bSQL2SQL.BSubstitution <em>BSubstitution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see bsql2sql.bSQL2SQL.BSubstitution
   * @generated
   */
  public Adapter createBSubstitutionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BSQL2SQLAdapterFactory
