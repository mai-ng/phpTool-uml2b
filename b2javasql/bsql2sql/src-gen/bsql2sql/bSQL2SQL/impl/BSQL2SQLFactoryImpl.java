/**
 * generated by Xtext 2.10.0
 */
package bsql2sql.bSQL2SQL.impl;

import bsql2sql.bSQL2SQL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BSQL2SQLFactoryImpl extends EFactoryImpl implements BSQL2SQLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BSQL2SQLFactory init()
  {
    try
    {
      BSQL2SQLFactory theBSQL2SQLFactory = (BSQL2SQLFactory)EPackage.Registry.INSTANCE.getEFactory(BSQL2SQLPackage.eNS_URI);
      if (theBSQL2SQLFactory != null)
      {
        return theBSQL2SQLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BSQL2SQLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BSQL2SQLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BSQL2SQLPackage.BSQL2SQL: return createBSQL2SQL();
      case BSQL2SQLPackage.BSQL_MACHINE: return createBSQLMachine();
      case BSQL2SQLPackage.BTABLE: return createBTable();
      case BSQL2SQLPackage.ATTRIBUTE: return createAttribute();
      case BSQL2SQLPackage.BTYPE: return createBType();
      case BSQL2SQLPackage.BS_OPERATION: return createBSOperation();
      case BSQL2SQLPackage.BOOL_OPERATION: return createBoolOperation();
      case BSQL2SQLPackage.VOID_OPERATION: return createVoidOperation();
      case BSQL2SQLPackage.BPREDICATE: return createBPredicate();
      case BSQL2SQLPackage.SQL_CALL: return createSQLCall();
      case BSQL2SQLPackage.TABLE_INSTANCE: return createTableInstance();
      case BSQL2SQLPackage.TI_ASSIGNMENT: return createTIAssignment();
      case BSQL2SQLPackage.BPARAMETER: return createBParameter();
      case BSQL2SQLPackage.BSUBSTITUTION: return createBSubstitution();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BSQL2SQL createBSQL2SQL()
  {
    BSQL2SQLImpl bsql2SQL = new BSQL2SQLImpl();
    return bsql2SQL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BSQLMachine createBSQLMachine()
  {
    BSQLMachineImpl bsqlMachine = new BSQLMachineImpl();
    return bsqlMachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BTable createBTable()
  {
    BTableImpl bTable = new BTableImpl();
    return bTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BType createBType()
  {
    BTypeImpl bType = new BTypeImpl();
    return bType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BSOperation createBSOperation()
  {
    BSOperationImpl bsOperation = new BSOperationImpl();
    return bsOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolOperation createBoolOperation()
  {
    BoolOperationImpl boolOperation = new BoolOperationImpl();
    return boolOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VoidOperation createVoidOperation()
  {
    VoidOperationImpl voidOperation = new VoidOperationImpl();
    return voidOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BPredicate createBPredicate()
  {
    BPredicateImpl bPredicate = new BPredicateImpl();
    return bPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SQLCall createSQLCall()
  {
    SQLCallImpl sqlCall = new SQLCallImpl();
    return sqlCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TableInstance createTableInstance()
  {
    TableInstanceImpl tableInstance = new TableInstanceImpl();
    return tableInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TIAssignment createTIAssignment()
  {
    TIAssignmentImpl tiAssignment = new TIAssignmentImpl();
    return tiAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BParameter createBParameter()
  {
    BParameterImpl bParameter = new BParameterImpl();
    return bParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BSubstitution createBSubstitution()
  {
    BSubstitutionImpl bSubstitution = new BSubstitutionImpl();
    return bSubstitution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BSQL2SQLPackage getBSQL2SQLPackage()
  {
    return (BSQL2SQLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BSQL2SQLPackage getPackage()
  {
    return BSQL2SQLPackage.eINSTANCE;
  }

} //BSQL2SQLFactoryImpl
