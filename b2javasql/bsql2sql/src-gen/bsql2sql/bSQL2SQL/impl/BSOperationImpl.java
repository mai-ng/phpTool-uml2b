/**
 * generated by Xtext 2.10.0
 */
package bsql2sql.bSQL2SQL.impl;

import bsql2sql.bSQL2SQL.BSOperation;
import bsql2sql.bSQL2SQL.BSQL2SQLPackage;
import bsql2sql.bSQL2SQL.BoolOperation;
import bsql2sql.bSQL2SQL.VoidOperation;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>BS Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link bsql2sql.bSQL2SQL.impl.BSOperationImpl#getBop <em>Bop</em>}</li>
 *   <li>{@link bsql2sql.bSQL2SQL.impl.BSOperationImpl#getVop <em>Vop</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BSOperationImpl extends MinimalEObjectImpl.Container implements BSOperation
{
  /**
   * The cached value of the '{@link #getBop() <em>Bop</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBop()
   * @generated
   * @ordered
   */
  protected BoolOperation bop;

  /**
   * The cached value of the '{@link #getVop() <em>Vop</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVop()
   * @generated
   * @ordered
   */
  protected VoidOperation vop;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BSOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BSQL2SQLPackage.Literals.BS_OPERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolOperation getBop()
  {
    return bop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBop(BoolOperation newBop, NotificationChain msgs)
  {
    BoolOperation oldBop = bop;
    bop = newBop;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BSQL2SQLPackage.BS_OPERATION__BOP, oldBop, newBop);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBop(BoolOperation newBop)
  {
    if (newBop != bop)
    {
      NotificationChain msgs = null;
      if (bop != null)
        msgs = ((InternalEObject)bop).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BSQL2SQLPackage.BS_OPERATION__BOP, null, msgs);
      if (newBop != null)
        msgs = ((InternalEObject)newBop).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BSQL2SQLPackage.BS_OPERATION__BOP, null, msgs);
      msgs = basicSetBop(newBop, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BSQL2SQLPackage.BS_OPERATION__BOP, newBop, newBop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VoidOperation getVop()
  {
    return vop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVop(VoidOperation newVop, NotificationChain msgs)
  {
    VoidOperation oldVop = vop;
    vop = newVop;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BSQL2SQLPackage.BS_OPERATION__VOP, oldVop, newVop);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVop(VoidOperation newVop)
  {
    if (newVop != vop)
    {
      NotificationChain msgs = null;
      if (vop != null)
        msgs = ((InternalEObject)vop).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BSQL2SQLPackage.BS_OPERATION__VOP, null, msgs);
      if (newVop != null)
        msgs = ((InternalEObject)newVop).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BSQL2SQLPackage.BS_OPERATION__VOP, null, msgs);
      msgs = basicSetVop(newVop, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BSQL2SQLPackage.BS_OPERATION__VOP, newVop, newVop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BS_OPERATION__BOP:
        return basicSetBop(null, msgs);
      case BSQL2SQLPackage.BS_OPERATION__VOP:
        return basicSetVop(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BS_OPERATION__BOP:
        return getBop();
      case BSQL2SQLPackage.BS_OPERATION__VOP:
        return getVop();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BS_OPERATION__BOP:
        setBop((BoolOperation)newValue);
        return;
      case BSQL2SQLPackage.BS_OPERATION__VOP:
        setVop((VoidOperation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BS_OPERATION__BOP:
        setBop((BoolOperation)null);
        return;
      case BSQL2SQLPackage.BS_OPERATION__VOP:
        setVop((VoidOperation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BS_OPERATION__BOP:
        return bop != null;
      case BSQL2SQLPackage.BS_OPERATION__VOP:
        return vop != null;
    }
    return super.eIsSet(featureID);
  }

} //BSOperationImpl
