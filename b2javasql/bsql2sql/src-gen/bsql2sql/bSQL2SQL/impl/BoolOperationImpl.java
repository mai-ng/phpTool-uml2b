/**
 * generated by Xtext 2.10.0
 */
package bsql2sql.bSQL2SQL.impl;

import bsql2sql.bSQL2SQL.BParameter;
import bsql2sql.bSQL2SQL.BPredicate;
import bsql2sql.bSQL2SQL.BSQL2SQLPackage;
import bsql2sql.bSQL2SQL.BoolOperation;
import bsql2sql.bSQL2SQL.TableInstance;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bool Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link bsql2sql.bSQL2SQL.impl.BoolOperationImpl#getOp_name <em>Op name</em>}</li>
 *   <li>{@link bsql2sql.bSQL2SQL.impl.BoolOperationImpl#getPList <em>PList</em>}</li>
 *   <li>{@link bsql2sql.bSQL2SQL.impl.BoolOperationImpl#getParams <em>Params</em>}</li>
 *   <li>{@link bsql2sql.bSQL2SQL.impl.BoolOperationImpl#getObjTable <em>Obj Table</em>}</li>
 *   <li>{@link bsql2sql.bSQL2SQL.impl.BoolOperationImpl#getPres <em>Pres</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BoolOperationImpl extends MinimalEObjectImpl.Container implements BoolOperation
{
  /**
   * The default value of the '{@link #getOp_name() <em>Op name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp_name()
   * @generated
   * @ordered
   */
  protected static final String OP_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOp_name() <em>Op name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp_name()
   * @generated
   * @ordered
   */
  protected String op_name = OP_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getPList() <em>PList</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPList()
   * @generated
   * @ordered
   */
  protected EList<String> pList;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected EList<BParameter> params;

  /**
   * The cached value of the '{@link #getObjTable() <em>Obj Table</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjTable()
   * @generated
   * @ordered
   */
  protected TableInstance objTable;

  /**
   * The cached value of the '{@link #getPres() <em>Pres</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPres()
   * @generated
   * @ordered
   */
  protected EList<BPredicate> pres;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BoolOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BSQL2SQLPackage.Literals.BOOL_OPERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOp_name()
  {
    return op_name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOp_name(String newOp_name)
  {
    String oldOp_name = op_name;
    op_name = newOp_name;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BSQL2SQLPackage.BOOL_OPERATION__OP_NAME, oldOp_name, op_name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getPList()
  {
    if (pList == null)
    {
      pList = new EDataTypeEList<String>(String.class, this, BSQL2SQLPackage.BOOL_OPERATION__PLIST);
    }
    return pList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BParameter> getParams()
  {
    if (params == null)
    {
      params = new EObjectContainmentEList<BParameter>(BParameter.class, this, BSQL2SQLPackage.BOOL_OPERATION__PARAMS);
    }
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TableInstance getObjTable()
  {
    return objTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObjTable(TableInstance newObjTable, NotificationChain msgs)
  {
    TableInstance oldObjTable = objTable;
    objTable = newObjTable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BSQL2SQLPackage.BOOL_OPERATION__OBJ_TABLE, oldObjTable, newObjTable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setObjTable(TableInstance newObjTable)
  {
    if (newObjTable != objTable)
    {
      NotificationChain msgs = null;
      if (objTable != null)
        msgs = ((InternalEObject)objTable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BSQL2SQLPackage.BOOL_OPERATION__OBJ_TABLE, null, msgs);
      if (newObjTable != null)
        msgs = ((InternalEObject)newObjTable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BSQL2SQLPackage.BOOL_OPERATION__OBJ_TABLE, null, msgs);
      msgs = basicSetObjTable(newObjTable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BSQL2SQLPackage.BOOL_OPERATION__OBJ_TABLE, newObjTable, newObjTable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BPredicate> getPres()
  {
    if (pres == null)
    {
      pres = new EObjectContainmentEList<BPredicate>(BPredicate.class, this, BSQL2SQLPackage.BOOL_OPERATION__PRES);
    }
    return pres;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BOOL_OPERATION__PARAMS:
        return ((InternalEList<?>)getParams()).basicRemove(otherEnd, msgs);
      case BSQL2SQLPackage.BOOL_OPERATION__OBJ_TABLE:
        return basicSetObjTable(null, msgs);
      case BSQL2SQLPackage.BOOL_OPERATION__PRES:
        return ((InternalEList<?>)getPres()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BOOL_OPERATION__OP_NAME:
        return getOp_name();
      case BSQL2SQLPackage.BOOL_OPERATION__PLIST:
        return getPList();
      case BSQL2SQLPackage.BOOL_OPERATION__PARAMS:
        return getParams();
      case BSQL2SQLPackage.BOOL_OPERATION__OBJ_TABLE:
        return getObjTable();
      case BSQL2SQLPackage.BOOL_OPERATION__PRES:
        return getPres();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BOOL_OPERATION__OP_NAME:
        setOp_name((String)newValue);
        return;
      case BSQL2SQLPackage.BOOL_OPERATION__PLIST:
        getPList().clear();
        getPList().addAll((Collection<? extends String>)newValue);
        return;
      case BSQL2SQLPackage.BOOL_OPERATION__PARAMS:
        getParams().clear();
        getParams().addAll((Collection<? extends BParameter>)newValue);
        return;
      case BSQL2SQLPackage.BOOL_OPERATION__OBJ_TABLE:
        setObjTable((TableInstance)newValue);
        return;
      case BSQL2SQLPackage.BOOL_OPERATION__PRES:
        getPres().clear();
        getPres().addAll((Collection<? extends BPredicate>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BOOL_OPERATION__OP_NAME:
        setOp_name(OP_NAME_EDEFAULT);
        return;
      case BSQL2SQLPackage.BOOL_OPERATION__PLIST:
        getPList().clear();
        return;
      case BSQL2SQLPackage.BOOL_OPERATION__PARAMS:
        getParams().clear();
        return;
      case BSQL2SQLPackage.BOOL_OPERATION__OBJ_TABLE:
        setObjTable((TableInstance)null);
        return;
      case BSQL2SQLPackage.BOOL_OPERATION__PRES:
        getPres().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BSQL2SQLPackage.BOOL_OPERATION__OP_NAME:
        return OP_NAME_EDEFAULT == null ? op_name != null : !OP_NAME_EDEFAULT.equals(op_name);
      case BSQL2SQLPackage.BOOL_OPERATION__PLIST:
        return pList != null && !pList.isEmpty();
      case BSQL2SQLPackage.BOOL_OPERATION__PARAMS:
        return params != null && !params.isEmpty();
      case BSQL2SQLPackage.BOOL_OPERATION__OBJ_TABLE:
        return objTable != null;
      case BSQL2SQLPackage.BOOL_OPERATION__PRES:
        return pres != null && !pres.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (op_name: ");
    result.append(op_name);
    result.append(", pList: ");
    result.append(pList);
    result.append(')');
    return result.toString();
  }

} //BoolOperationImpl
