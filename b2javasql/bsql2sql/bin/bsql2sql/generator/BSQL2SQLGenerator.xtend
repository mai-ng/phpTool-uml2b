/*
 * generated by Xtext 2.10.0
 */
package bsql2sql.generator

import bsql2sql.bSQL2SQL.Attribute
import bsql2sql.bSQL2SQL.BSOperation
import bsql2sql.bSQL2SQL.BSQLMachine
import bsql2sql.bSQL2SQL.BTable
import bsql2sql.bSQL2SQL.BType
import bsql2sql.bSQL2SQL.BoolOperation
import bsql2sql.bSQL2SQL.VoidOperation
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BSQL2SQLGenerator extends AbstractGenerator {

override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        
        for (t : resource.allContents.toIterable.filter(BSQLMachine)) {
            fsa.generateFile(
                t.m_name + ".sql", t.compile)
        }
        
   }
    
    def compile(BSQLMachine m)'''
    	--SQL code of «m.m_name»
    	«m.inv.compile»
    	«FOR o : m.ops»
    	    «o.compile»
    	«ENDFOR»
    '''
    
    def compile(BSOperation o)'''
    	«o.bop.compile»
    	«o.vop.compile»
    '''
    
    def compile(VoidOperation vo)'''
    	TO DO...
    '''

   def compile (BoolOperation bo)'''
   --generation of the operation «bo.op_name»
   	CREATE PROCEDURE «bo.op_name»
   		«FOR p : bo.params SEPARATOR ','»
   		   @«p.p_name» «p.type.compile2sql»
   		«ENDFOR»,
   		@res INT OUTPUT
   		AS
   			BEGIN
   				SELECT @res = COUNT(*) 
   				FROM «IF bo.objTable.ti_name.equals(bo.objTable.ti_type.instance_name)»«bo.objTable.ti_type.instance_type»«ENDIF»
   				WHERE «FOR p: bo.pres SEPARATOR ' AND' » «p.PLeft.SRight» =    				   		  				   		
   				   		«IF p.PRight.equals('FALSE')» 0
   				   		«ELSEIF p.PRight.equals('TRUE')» 1
   				   		«ELSEIF p.PRight instanceof String» @«p.PRight»
   				   		«ELSE» «p.PRight» «ENDIF»
   				   	  «ENDFOR»
   			END
   		GO
   		
   '''
    
 	def compile(BTable t)'''
 	/*generation of the SQL table from the B variable «t.table_name»*/		
		CREATE TABLE «t.table_name» {
			/*they key is the first attribute*/
			«var first = t.attributes.head»
			 	«first.compile» PRIMARY KEY NOT NULL 
 		     «FOR a : t.attributes SEPARATOR ','»«IF a.equals(first)»«ELSE»	
 		     	«a.compile» NOT NULL «ENDIF»
 		     «ENDFOR»
		}
 	'''
 	def compile(Attribute a)'''«a.att_name» «a.type.compile2sql»'''
    
    def compile2sql(BType t)'''«switch t.type_name{
    		case 'NAT': 'INT'
    		case 'BOOL': 'BOOLEAN'
    		case 'STR': 'VARCHAR(25)'
    		case 'Users': 'VARCHAR(25)'
    		case 'Roles': 'VARCHAR(25)'    		
    		default: 'INT' 	
    	}»''' 
}
