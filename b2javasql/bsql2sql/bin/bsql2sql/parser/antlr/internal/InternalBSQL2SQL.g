/*
 * generated by Xtext 2.10.0
 */
grammar InternalBSQL2SQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package bsql2sql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package bsql2sql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import bsql2sql.services.BSQL2SQLGrammarAccess;

}

@parser::members {

 	private BSQL2SQLGrammarAccess grammarAccess;

    public InternalBSQL2SQLParser(TokenStream input, BSQL2SQLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "BSQL2SQL";
   	}

   	@Override
   	protected BSQL2SQLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBSQL2SQL
entryRuleBSQL2SQL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBSQL2SQLRule()); }
	iv_ruleBSQL2SQL=ruleBSQL2SQL
	{ $current=$iv_ruleBSQL2SQL.current; }
	EOF;

// Rule BSQL2SQL
ruleBSQL2SQL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBSQL2SQLAccess().getBSQLMachineParserRuleCall());
	}
	this_BSQLMachine_0=ruleBSQLMachine
	{
		$current = $this_BSQLMachine_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBSQLMachine
entryRuleBSQLMachine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBSQLMachineRule()); }
	iv_ruleBSQLMachine=ruleBSQLMachine
	{ $current=$iv_ruleBSQLMachine.current; }
	EOF;

// Rule BSQLMachine
ruleBSQLMachine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MACHINE'
		{
			newLeafNode(otherlv_0, grammarAccess.getBSQLMachineAccess().getMACHINEKeyword_0());
		}
		(
			(
				lv_m_name_1_0=RULE_ID
				{
					newLeafNode(lv_m_name_1_0, grammarAccess.getBSQLMachineAccess().getM_nameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBSQLMachineRule());
					}
					setWithLastConsumed(
						$current,
						"m_name",
						lv_m_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='VARIABLES'
		{
			newLeafNode(otherlv_2, grammarAccess.getBSQLMachineAccess().getVARIABLESKeyword_2());
		}
		(
			(
				lv_vars_3_0=RULE_ID
				{
					newLeafNode(lv_vars_3_0, grammarAccess.getBSQLMachineAccess().getVarsIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBSQLMachineRule());
					}
					setWithLastConsumed(
						$current,
						"vars",
						lv_vars_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='INVARIANT'
		{
			newLeafNode(otherlv_4, grammarAccess.getBSQLMachineAccess().getINVARIANTKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBSQLMachineAccess().getInvBTableParserRuleCall_5_0());
				}
				lv_inv_5_0=ruleBTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBSQLMachineRule());
					}
					set(
						$current,
						"inv",
						lv_inv_5_0,
						"bsql2sql.BSQL2SQL.BTable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='INITIALISATION'
		{
			newLeafNode(otherlv_6, grammarAccess.getBSQLMachineAccess().getINITIALISATIONKeyword_6());
		}
		(
			(
				lv_init_7_0=RULE_ID
				{
					newLeafNode(lv_init_7_0, grammarAccess.getBSQLMachineAccess().getInitIDTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBSQLMachineRule());
					}
					setWithLastConsumed(
						$current,
						"init",
						lv_init_7_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_8=':='
		{
			newLeafNode(otherlv_8, grammarAccess.getBSQLMachineAccess().getColonEqualsSignKeyword_8());
		}
		otherlv_9='{}'
		{
			newLeafNode(otherlv_9, grammarAccess.getBSQLMachineAccess().getLeftCurlyBracketRightCurlyBracketKeyword_9());
		}
		otherlv_10='OPERATIONS'
		{
			newLeafNode(otherlv_10, grammarAccess.getBSQLMachineAccess().getOPERATIONSKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBSQLMachineAccess().getOpsBSOperationParserRuleCall_11_0());
				}
				lv_ops_11_0=ruleBSOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBSQLMachineRule());
					}
					add(
						$current,
						"ops",
						lv_ops_11_0,
						"bsql2sql.BSQL2SQL.BSOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleBTable
entryRuleBTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBTableRule()); }
	iv_ruleBTable=ruleBTable
	{ $current=$iv_ruleBTable.current; }
	EOF;

// Rule BTable
ruleBTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_table_name_0_0=RULE_ID
				{
					newLeafNode(lv_table_name_0_0, grammarAccess.getBTableAccess().getTable_nameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBTableRule());
					}
					setWithLastConsumed(
						$current,
						"table_name",
						lv_table_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='<:'
		{
			newLeafNode(otherlv_1, grammarAccess.getBTableAccess().getLessThanSignColonKeyword_1());
		}
		otherlv_2='struct'
		{
			newLeafNode(otherlv_2, grammarAccess.getBTableAccess().getStructKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getBTableAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBTableAccess().getAttributesAttributeParserRuleCall_4_0());
				}
				lv_attributes_4_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBTableRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_4_0,
						"bsql2sql.BSQL2SQL.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getBTableAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBTableAccess().getAttributesAttributeParserRuleCall_5_1_0());
					}
					lv_attributes_6_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBTableRule());
						}
						add(
							$current,
							"attributes",
							lv_attributes_6_0,
							"bsql2sql.BSQL2SQL.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getBTableAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_att_name_0_0=RULE_ID
				{
					newLeafNode(lv_att_name_0_0, grammarAccess.getAttributeAccess().getAtt_nameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"att_name",
						lv_att_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeBTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleBType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"bsql2sql.BSQL2SQL.BType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBType
entryRuleBType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBTypeRule()); }
	iv_ruleBType=ruleBType
	{ $current=$iv_ruleBType.current; }
	EOF;

// Rule BType
ruleBType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_type_name_0_0=RULE_ID
			{
				newLeafNode(lv_type_name_0_0, grammarAccess.getBTypeAccess().getType_nameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBTypeRule());
				}
				setWithLastConsumed(
					$current,
					"type_name",
					lv_type_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleBValue
entryRuleBValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBValueRule()); }
	iv_ruleBValue=ruleBValue
	{ $current=$iv_ruleBValue.current.getText(); }
	EOF;

// Rule BValue
ruleBValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getBValueAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getBValueAccess().getINTTerminalRuleCall_1());
		}
		    |
		kw='FALSE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBValueAccess().getFALSEKeyword_2());
		}
		    |
		kw='TRUE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBValueAccess().getTRUEKeyword_3());
		}
	)
;

// Entry rule entryRuleBSOperation
entryRuleBSOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBSOperationRule()); }
	iv_ruleBSOperation=ruleBSOperation
	{ $current=$iv_ruleBSOperation.current; }
	EOF;

// Rule BSOperation
ruleBSOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBSOperationAccess().getBopBoolOperationParserRuleCall_0_0());
				}
				lv_bop_0_0=ruleBoolOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBSOperationRule());
					}
					set(
						$current,
						"bop",
						lv_bop_0_0,
						"bsql2sql.BSQL2SQL.BoolOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBSOperationAccess().getVopVoidOperationParserRuleCall_1_0());
				}
				lv_vop_1_0=ruleVoidOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBSOperationRule());
					}
					set(
						$current,
						"vop",
						lv_vop_1_0,
						"bsql2sql.BSQL2SQL.VoidOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolOperation
entryRuleBoolOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolOperationRule()); }
	iv_ruleBoolOperation=ruleBoolOperation
	{ $current=$iv_ruleBoolOperation.current; }
	EOF;

// Rule BoolOperation
ruleBoolOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='res'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoolOperationAccess().getResKeyword_0());
		}
		otherlv_1='<--'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolOperationAccess().getLessThanSignHyphenMinusHyphenMinusKeyword_1());
		}
		(
			(
				lv_op_name_2_0=RULE_ID
				{
					newLeafNode(lv_op_name_2_0, grammarAccess.getBoolOperationAccess().getOp_nameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolOperationRule());
					}
					setWithLastConsumed(
						$current,
						"op_name",
						lv_op_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getBoolOperationAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					lv_pList_4_0=RULE_ID
					{
						newLeafNode(lv_pList_4_0, grammarAccess.getBoolOperationAccess().getPListIDTerminalRuleCall_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBoolOperationRule());
						}
						addWithLastConsumed(
							$current,
							"pList",
							lv_pList_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getBoolOperationAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						lv_pList_6_0=RULE_ID
						{
							newLeafNode(lv_pList_6_0, grammarAccess.getBoolOperationAccess().getPListIDTerminalRuleCall_4_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoolOperationRule());
							}
							addWithLastConsumed(
								$current,
								"pList",
								lv_pList_6_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getBoolOperationAccess().getRightParenthesisKeyword_5());
		}
		otherlv_8='='
		{
			newLeafNode(otherlv_8, grammarAccess.getBoolOperationAccess().getEqualsSignKeyword_6());
		}
		otherlv_9='PRE'
		{
			newLeafNode(otherlv_9, grammarAccess.getBoolOperationAccess().getPREKeyword_7());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolOperationAccess().getParamsBParameterParserRuleCall_8_0_0());
					}
					lv_params_10_0=ruleBParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolOperationRule());
						}
						add(
							$current,
							"params",
							lv_params_10_0,
							"bsql2sql.BSQL2SQL.BParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11='&'
				{
					newLeafNode(otherlv_11, grammarAccess.getBoolOperationAccess().getAmpersandKeyword_8_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBoolOperationAccess().getParamsBParameterParserRuleCall_8_1_1_0());
						}
						lv_params_12_0=ruleBParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBoolOperationRule());
							}
							add(
								$current,
								"params",
								lv_params_12_0,
								"bsql2sql.BSQL2SQL.BParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		otherlv_13='THEN'
		{
			newLeafNode(otherlv_13, grammarAccess.getBoolOperationAccess().getTHENKeyword_9());
		}
		otherlv_14='res'
		{
			newLeafNode(otherlv_14, grammarAccess.getBoolOperationAccess().getResKeyword_10());
		}
		otherlv_15=':='
		{
			newLeafNode(otherlv_15, grammarAccess.getBoolOperationAccess().getColonEqualsSignKeyword_11());
		}
		otherlv_16='bool('
		{
			newLeafNode(otherlv_16, grammarAccess.getBoolOperationAccess().getBoolKeyword_12());
		}
		otherlv_17='#'
		{
			newLeafNode(otherlv_17, grammarAccess.getBoolOperationAccess().getNumberSignKeyword_13());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolOperationAccess().getObjTableTableInstanceParserRuleCall_14_0());
				}
				lv_objTable_18_0=ruleTableInstance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolOperationRule());
					}
					set(
						$current,
						"objTable",
						lv_objTable_18_0,
						"bsql2sql.BSQL2SQL.TableInstance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_19='&'
		{
			newLeafNode(otherlv_19, grammarAccess.getBoolOperationAccess().getAmpersandKeyword_15());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolOperationAccess().getPresBPredicateParserRuleCall_16_0());
				}
				lv_pres_20_0=ruleBPredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolOperationRule());
					}
					add(
						$current,
						"pres",
						lv_pres_20_0,
						"bsql2sql.BSQL2SQL.BPredicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_21='&'
			{
				newLeafNode(otherlv_21, grammarAccess.getBoolOperationAccess().getAmpersandKeyword_17_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolOperationAccess().getPresBPredicateParserRuleCall_17_1_0());
					}
					lv_pres_22_0=ruleBPredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolOperationRule());
						}
						add(
							$current,
							"pres",
							lv_pres_22_0,
							"bsql2sql.BSQL2SQL.BPredicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_23=')'
		{
			newLeafNode(otherlv_23, grammarAccess.getBoolOperationAccess().getRightParenthesisKeyword_18());
		}
		otherlv_24=')'
		{
			newLeafNode(otherlv_24, grammarAccess.getBoolOperationAccess().getRightParenthesisKeyword_19());
		}
		otherlv_25='END'
		{
			newLeafNode(otherlv_25, grammarAccess.getBoolOperationAccess().getENDKeyword_20());
		}
	)
;

// Entry rule entryRuleVoidOperation
entryRuleVoidOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVoidOperationRule()); }
	iv_ruleVoidOperation=ruleVoidOperation
	{ $current=$iv_ruleVoidOperation.current; }
	EOF;

// Rule VoidOperation
ruleVoidOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_name_0_0=RULE_ID
				{
					newLeafNode(lv_op_name_0_0, grammarAccess.getVoidOperationAccess().getOp_nameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVoidOperationRule());
					}
					setWithLastConsumed(
						$current,
						"op_name",
						lv_op_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getVoidOperationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_pList_2_0=RULE_ID
					{
						newLeafNode(lv_pList_2_0, grammarAccess.getVoidOperationAccess().getPListIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVoidOperationRule());
						}
						addWithLastConsumed(
							$current,
							"pList",
							lv_pList_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getVoidOperationAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						lv_pList_4_0=RULE_ID
						{
							newLeafNode(lv_pList_4_0, grammarAccess.getVoidOperationAccess().getPListIDTerminalRuleCall_2_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVoidOperationRule());
							}
							addWithLastConsumed(
								$current,
								"pList",
								lv_pList_4_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getVoidOperationAccess().getRightParenthesisKeyword_3());
		}
		otherlv_6='='
		{
			newLeafNode(otherlv_6, grammarAccess.getVoidOperationAccess().getEqualsSignKeyword_4());
		}
		otherlv_7='PRE'
		{
			newLeafNode(otherlv_7, grammarAccess.getVoidOperationAccess().getPREKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVoidOperationAccess().getParamsBParameterParserRuleCall_6_0_0());
					}
					lv_params_8_0=ruleBParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVoidOperationRule());
						}
						add(
							$current,
							"params",
							lv_params_8_0,
							"bsql2sql.BSQL2SQL.BParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9='&'
				{
					newLeafNode(otherlv_9, grammarAccess.getVoidOperationAccess().getAmpersandKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVoidOperationAccess().getParamsBParameterParserRuleCall_6_1_1_0());
						}
						lv_params_10_0=ruleBParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVoidOperationRule());
							}
							add(
								$current,
								"params",
								lv_params_10_0,
								"bsql2sql.BSQL2SQL.BParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		otherlv_11='THEN'
		{
			newLeafNode(otherlv_11, grammarAccess.getVoidOperationAccess().getTHENKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVoidOperationAccess().getSubsBSubstitutionParserRuleCall_8_0());
				}
				lv_subs_12_0=ruleBSubstitution
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVoidOperationRule());
					}
					add(
						$current,
						"subs",
						lv_subs_12_0,
						"bsql2sql.BSQL2SQL.BSubstitution");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_13='END'
		{
			newLeafNode(otherlv_13, grammarAccess.getVoidOperationAccess().getENDKeyword_9());
		}
	)
;

// Entry rule entryRuleBPredicate
entryRuleBPredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBPredicateRule()); }
	iv_ruleBPredicate=ruleBPredicate
	{ $current=$iv_ruleBPredicate.current; }
	EOF;

// Rule BPredicate
ruleBPredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBPredicateAccess().getBPredicateAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBPredicateAccess().getPLeftSQLCallParserRuleCall_1_0_0());
					}
					lv_PLeft_1_0=ruleSQLCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBPredicateRule());
						}
						set(
							$current,
							"PLeft",
							lv_PLeft_1_0,
							"bsql2sql.BSQL2SQL.SQLCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getBPredicateAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBPredicateAccess().getPRightBValueParserRuleCall_1_2_0());
					}
					lv_PRight_3_0=ruleBValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBPredicateRule());
						}
						set(
							$current,
							"PRight",
							lv_PRight_3_0,
							"bsql2sql.BSQL2SQL.BValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSQLCall
entryRuleSQLCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSQLCallRule()); }
	iv_ruleSQLCall=ruleSQLCall
	{ $current=$iv_ruleSQLCall.current; }
	EOF;

// Rule SQLCall
ruleSQLCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_SLeft_0_0=RULE_ID
				{
					newLeafNode(lv_SLeft_0_0, grammarAccess.getSQLCallAccess().getSLeftIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSQLCallRule());
					}
					setWithLastConsumed(
						$current,
						"SLeft",
						lv_SLeft_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='\''
		{
			newLeafNode(otherlv_1, grammarAccess.getSQLCallAccess().getApostropheKeyword_1());
		}
		(
			(
				lv_SRight_2_0=RULE_ID
				{
					newLeafNode(lv_SRight_2_0, grammarAccess.getSQLCallAccess().getSRightIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSQLCallRule());
					}
					setWithLastConsumed(
						$current,
						"SRight",
						lv_SRight_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleTableInstance
entryRuleTableInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableInstanceRule()); }
	iv_ruleTableInstance=ruleTableInstance
	{ $current=$iv_ruleTableInstance.current; }
	EOF;

// Rule TableInstance
ruleTableInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_ti_name_0_0=RULE_ID
				{
					newLeafNode(lv_ti_name_0_0, grammarAccess.getTableInstanceAccess().getTi_nameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableInstanceRule());
					}
					setWithLastConsumed(
						$current,
						"ti_name",
						lv_ti_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='.('
		{
			newLeafNode(otherlv_1, grammarAccess.getTableInstanceAccess().getFullStopLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableInstanceAccess().getTi_typeTIAssignmentParserRuleCall_2_0());
				}
				lv_ti_type_2_0=ruleTIAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableInstanceRule());
					}
					set(
						$current,
						"ti_type",
						lv_ti_type_2_0,
						"bsql2sql.BSQL2SQL.TIAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTIAssignment
entryRuleTIAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTIAssignmentRule()); }
	iv_ruleTIAssignment=ruleTIAssignment
	{ $current=$iv_ruleTIAssignment.current; }
	EOF;

// Rule TIAssignment
ruleTIAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_instance_name_0_0=RULE_ID
				{
					newLeafNode(lv_instance_name_0_0, grammarAccess.getTIAssignmentAccess().getInstance_nameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTIAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"instance_name",
						lv_instance_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTIAssignmentAccess().getColonKeyword_1());
		}
		(
			(
				lv_instance_type_2_0=RULE_ID
				{
					newLeafNode(lv_instance_type_2_0, grammarAccess.getTIAssignmentAccess().getInstance_typeIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTIAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"instance_type",
						lv_instance_type_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleBParameter
entryRuleBParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBParameterRule()); }
	iv_ruleBParameter=ruleBParameter
	{ $current=$iv_ruleBParameter.current; }
	EOF;

// Rule BParameter
ruleBParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_p_name_0_0=RULE_ID
				{
					newLeafNode(lv_p_name_0_0, grammarAccess.getBParameterAccess().getP_nameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBParameterRule());
					}
					setWithLastConsumed(
						$current,
						"p_name",
						lv_p_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getBParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBParameterAccess().getTypeBTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleBType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"bsql2sql.BSQL2SQL.BType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBSubstitution
entryRuleBSubstitution returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBSubstitutionRule()); }
	iv_ruleBSubstitution=ruleBSubstitution
	{ $current=$iv_ruleBSubstitution.current; }
	EOF;

// Rule BSubstitution
ruleBSubstitution returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_left_0_0=RULE_ID
				{
					newLeafNode(lv_left_0_0, grammarAccess.getBSubstitutionAccess().getLeftIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBSubstitutionRule());
					}
					setWithLastConsumed(
						$current,
						"left",
						lv_left_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getBSubstitutionAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBSubstitutionAccess().getRightBPredicateParserRuleCall_2_0());
				}
				lv_right_2_0=ruleBPredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBSubstitutionRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"bsql2sql.BSQL2SQL.BPredicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_STRING : '#' '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
