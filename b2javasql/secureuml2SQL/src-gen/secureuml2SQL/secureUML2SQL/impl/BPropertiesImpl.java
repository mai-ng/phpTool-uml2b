/**
 * generated by Xtext 2.10.0
 */
package secureuml2SQL.secureUML2SQL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import secureuml2SQL.secureUML2SQL.BProperties;
import secureuml2SQL.secureUML2SQL.BTuple;
import secureuml2SQL.secureUML2SQL.SecureUML2SQLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>BProperties</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link secureuml2SQL.secureUML2SQL.impl.BPropertiesImpl#getCons <em>Cons</em>}</li>
 *   <li>{@link secureuml2SQL.secureUML2SQL.impl.BPropertiesImpl#getProp <em>Prop</em>}</li>
 *   <li>{@link secureuml2SQL.secureUML2SQL.impl.BPropertiesImpl#getPairs <em>Pairs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BPropertiesImpl extends MinimalEObjectImpl.Container implements BProperties
{
  /**
   * The default value of the '{@link #getCons() <em>Cons</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCons()
   * @generated
   * @ordered
   */
  protected static final String CONS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCons() <em>Cons</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCons()
   * @generated
   * @ordered
   */
  protected String cons = CONS_EDEFAULT;

  /**
   * The default value of the '{@link #getProp() <em>Prop</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProp()
   * @generated
   * @ordered
   */
  protected static final String PROP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProp() <em>Prop</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProp()
   * @generated
   * @ordered
   */
  protected String prop = PROP_EDEFAULT;

  /**
   * The cached value of the '{@link #getPairs() <em>Pairs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPairs()
   * @generated
   * @ordered
   */
  protected EList<BTuple> pairs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BPropertiesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SecureUML2SQLPackage.Literals.BPROPERTIES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
public String getCons()
  {
    return cons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
public void setCons(String newCons)
  {
    String oldCons = cons;
    cons = newCons;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SecureUML2SQLPackage.BPROPERTIES__CONS, oldCons, cons));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
public String getProp()
  {
    return prop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
public void setProp(String newProp)
  {
    String oldProp = prop;
    prop = newProp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SecureUML2SQLPackage.BPROPERTIES__PROP, oldProp, prop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
public EList<BTuple> getPairs()
  {
    if (pairs == null)
    {
      pairs = new EObjectContainmentEList<BTuple>(BTuple.class, this, SecureUML2SQLPackage.BPROPERTIES__PAIRS);
    }
    return pairs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SecureUML2SQLPackage.BPROPERTIES__PAIRS:
        return ((InternalEList<?>)getPairs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SecureUML2SQLPackage.BPROPERTIES__CONS:
        return getCons();
      case SecureUML2SQLPackage.BPROPERTIES__PROP:
        return getProp();
      case SecureUML2SQLPackage.BPROPERTIES__PAIRS:
        return getPairs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SecureUML2SQLPackage.BPROPERTIES__CONS:
        setCons((String)newValue);
        return;
      case SecureUML2SQLPackage.BPROPERTIES__PROP:
        setProp((String)newValue);
        return;
      case SecureUML2SQLPackage.BPROPERTIES__PAIRS:
        getPairs().clear();
        getPairs().addAll((Collection<? extends BTuple>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SecureUML2SQLPackage.BPROPERTIES__CONS:
        setCons(CONS_EDEFAULT);
        return;
      case SecureUML2SQLPackage.BPROPERTIES__PROP:
        setProp(PROP_EDEFAULT);
        return;
      case SecureUML2SQLPackage.BPROPERTIES__PAIRS:
        getPairs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SecureUML2SQLPackage.BPROPERTIES__CONS:
        return CONS_EDEFAULT == null ? cons != null : !CONS_EDEFAULT.equals(cons);
      case SecureUML2SQLPackage.BPROPERTIES__PROP:
        return PROP_EDEFAULT == null ? prop != null : !PROP_EDEFAULT.equals(prop);
      case SecureUML2SQLPackage.BPROPERTIES__PAIRS:
        return pairs != null && !pairs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (cons: ");
    result.append(cons);
    result.append(", prop: ");
    result.append(prop);
    result.append(')');
    return result.toString();
  }

} //BPropertiesImpl
