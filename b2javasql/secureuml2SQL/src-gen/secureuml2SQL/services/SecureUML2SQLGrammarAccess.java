/*
 * generated by Xtext 2.10.0
 */
package secureuml2SQL.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SecureUML2SQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SecureUML2SQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2SQL.SecureUML2SQL.SecureUML2SQL");
		private final RuleCall cBMachineParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SecureUML2SQL:
		//	BMachine;
		@Override public ParserRule getRule() { return rule; }
		
		//BMachine
		public RuleCall getBMachineParserRuleCall() { return cBMachineParserRuleCall; }
	}
	public class BMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2SQL.SecureUML2SQL.BMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMACHINEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cM_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cM_nameIDTerminalRuleCall_1_0 = (RuleCall)cM_nameAssignment_1.eContents().get(0);
		private final Keyword cSETSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEsetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEsetsBESetParserRuleCall_3_0 = (RuleCall)cEsetsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEsetsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEsetsBESetParserRuleCall_4_1_0 = (RuleCall)cEsetsAssignment_4_1.eContents().get(0);
		private final Keyword cCONSTANTSKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConsBConstantParserRuleCall_6_0 = (RuleCall)cConsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cConsBConstantParserRuleCall_7_1_0 = (RuleCall)cConsAssignment_7_1.eContents().get(0);
		private final Keyword cPROPERTIESKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cProsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cProsBPropertiesParserRuleCall_9_0 = (RuleCall)cProsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAmpersandKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cProsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cProsBPropertiesParserRuleCall_10_1_0 = (RuleCall)cProsAssignment_10_1.eContents().get(0);
		private final Keyword cENDKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//BMachine:
		//	'MACHINE' m_name=ID
		//	'SETS'
		//	//sets+=BSet(';' sets+=BSet)*
		//	esets+=BESet (';' esets+=BESet)*
		//	'CONSTANTS'
		//	cons+=BConstant (',' cons+=BConstant)*
		//	'PROPERTIES'
		//	pros+=BProperties ('&' pros+=BProperties)*
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//'MACHINE' m_name=ID 'SETS' //sets+=BSet(';' sets+=BSet)*
		//esets+=BESet (';' esets+=BESet)* 'CONSTANTS' cons+=BConstant (',' cons+=BConstant)* 'PROPERTIES' pros+=BProperties ('&'
		//pros+=BProperties)* 'END'
		public Group getGroup() { return cGroup; }
		
		//'MACHINE'
		public Keyword getMACHINEKeyword_0() { return cMACHINEKeyword_0; }
		
		//m_name=ID
		public Assignment getM_nameAssignment_1() { return cM_nameAssignment_1; }
		
		//ID
		public RuleCall getM_nameIDTerminalRuleCall_1_0() { return cM_nameIDTerminalRuleCall_1_0; }
		
		//'SETS'
		public Keyword getSETSKeyword_2() { return cSETSKeyword_2; }
		
		////sets+=BSet(';' sets+=BSet)*
		//esets+=BESet
		public Assignment getEsetsAssignment_3() { return cEsetsAssignment_3; }
		
		//BESet
		public RuleCall getEsetsBESetParserRuleCall_3_0() { return cEsetsBESetParserRuleCall_3_0; }
		
		//(';' esets+=BESet)*
		public Group getGroup_4() { return cGroup_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//esets+=BESet
		public Assignment getEsetsAssignment_4_1() { return cEsetsAssignment_4_1; }
		
		//BESet
		public RuleCall getEsetsBESetParserRuleCall_4_1_0() { return cEsetsBESetParserRuleCall_4_1_0; }
		
		//'CONSTANTS'
		public Keyword getCONSTANTSKeyword_5() { return cCONSTANTSKeyword_5; }
		
		//cons+=BConstant
		public Assignment getConsAssignment_6() { return cConsAssignment_6; }
		
		//BConstant
		public RuleCall getConsBConstantParserRuleCall_6_0() { return cConsBConstantParserRuleCall_6_0; }
		
		//(',' cons+=BConstant)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//cons+=BConstant
		public Assignment getConsAssignment_7_1() { return cConsAssignment_7_1; }
		
		//BConstant
		public RuleCall getConsBConstantParserRuleCall_7_1_0() { return cConsBConstantParserRuleCall_7_1_0; }
		
		//'PROPERTIES'
		public Keyword getPROPERTIESKeyword_8() { return cPROPERTIESKeyword_8; }
		
		//pros+=BProperties
		public Assignment getProsAssignment_9() { return cProsAssignment_9; }
		
		//BProperties
		public RuleCall getProsBPropertiesParserRuleCall_9_0() { return cProsBPropertiesParserRuleCall_9_0; }
		
		//('&' pros+=BProperties)*
		public Group getGroup_10() { return cGroup_10; }
		
		//'&'
		public Keyword getAmpersandKeyword_10_0() { return cAmpersandKeyword_10_0; }
		
		//pros+=BProperties
		public Assignment getProsAssignment_10_1() { return cProsAssignment_10_1; }
		
		//BProperties
		public RuleCall getProsBPropertiesParserRuleCall_10_1_0() { return cProsBPropertiesParserRuleCall_10_1_0; }
		
		//'END'
		public Keyword getENDKeyword_11() { return cENDKeyword_11; }
	}
	public class BPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2SQL.SecureUML2SQL.BProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConsIDTerminalRuleCall_0_0 = (RuleCall)cConsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPropLeftCurlyBracketKeyword_2_0 = (Keyword)cPropAssignment_2.eContents().get(0);
		private final Assignment cPairsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPairsBTupleParserRuleCall_3_0 = (RuleCall)cPairsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPairsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPairsBTupleParserRuleCall_4_1_0 = (RuleCall)cPairsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BProperties:
		//	cons=ID '=' prop='{' pairs+=BTuple (',' pairs+=BTuple)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//cons=ID '=' prop='{' pairs+=BTuple (',' pairs+=BTuple)* '}'
		public Group getGroup() { return cGroup; }
		
		//cons=ID
		public Assignment getConsAssignment_0() { return cConsAssignment_0; }
		
		//ID
		public RuleCall getConsIDTerminalRuleCall_0_0() { return cConsIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//prop='{'
		public Assignment getPropAssignment_2() { return cPropAssignment_2; }
		
		//'{'
		public Keyword getPropLeftCurlyBracketKeyword_2_0() { return cPropLeftCurlyBracketKeyword_2_0; }
		
		//pairs+=BTuple
		public Assignment getPairsAssignment_3() { return cPairsAssignment_3; }
		
		//BTuple
		public RuleCall getPairsBTupleParserRuleCall_3_0() { return cPairsBTupleParserRuleCall_3_0; }
		
		//(',' pairs+=BTuple)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//pairs+=BTuple
		public Assignment getPairsAssignment_4_1() { return cPairsAssignment_4_1; }
		
		//BTuple
		public RuleCall getPairsBTupleParserRuleCall_4_1_0() { return cPairsBTupleParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2SQL.SecureUML2SQL.BTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRanAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRanIDTerminalRuleCall_0_0 = (RuleCall)cRanAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomIDTerminalRuleCall_2_0 = (RuleCall)cDomAssignment_2.eContents().get(0);
		
		//BTuple:
		//	ran=ID '|->' dom=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ran=ID '|->' dom=ID
		public Group getGroup() { return cGroup; }
		
		//ran=ID
		public Assignment getRanAssignment_0() { return cRanAssignment_0; }
		
		//ID
		public RuleCall getRanIDTerminalRuleCall_0_0() { return cRanIDTerminalRuleCall_0_0; }
		
		//'|->'
		public Keyword getVerticalLineHyphenMinusGreaterThanSignKeyword_1() { return cVerticalLineHyphenMinusGreaterThanSignKeyword_1; }
		
		//dom=ID
		public Assignment getDomAssignment_2() { return cDomAssignment_2; }
		
		//ID
		public RuleCall getDomIDTerminalRuleCall_2_0() { return cDomIDTerminalRuleCall_2_0; }
	}
	public class BSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2SQL.SecureUML2SQL.BSet");
		private final Assignment cSet_nameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSet_nameIDTerminalRuleCall_0 = (RuleCall)cSet_nameAssignment.eContents().get(0);
		
		//BSet:
		//	set_name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//set_name=ID
		public Assignment getSet_nameAssignment() { return cSet_nameAssignment; }
		
		//ID
		public RuleCall getSet_nameIDTerminalRuleCall_0() { return cSet_nameIDTerminalRuleCall_0; }
	}
	public class BESetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2SQL.SecureUML2SQL.BESet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSet_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSet_nameIDTerminalRuleCall_0_0 = (RuleCall)cSet_nameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesBSetValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesBSetValueParserRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BESet:
		//	set_name=ID '=' '{' values+=BSetValue (',' values+=BSetValue)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//set_name=ID '=' '{' values+=BSetValue (',' values+=BSetValue)* '}'
		public Group getGroup() { return cGroup; }
		
		//set_name=ID
		public Assignment getSet_nameAssignment_0() { return cSet_nameAssignment_0; }
		
		//ID
		public RuleCall getSet_nameIDTerminalRuleCall_0_0() { return cSet_nameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=BSetValue
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//BSetValue
		public RuleCall getValuesBSetValueParserRuleCall_3_0() { return cValuesBSetValueParserRuleCall_3_0; }
		
		//(',' values+=BSetValue)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//values+=BSetValue
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }
		
		//BSetValue
		public RuleCall getValuesBSetValueParserRuleCall_4_1_0() { return cValuesBSetValueParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BSetValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2SQL.SecureUML2SQL.BSetValue");
		private final Assignment cValue_nameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValue_nameIDTerminalRuleCall_0 = (RuleCall)cValue_nameAssignment.eContents().get(0);
		
		//BSetValue:
		//	value_name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value_name=ID
		public Assignment getValue_nameAssignment() { return cValue_nameAssignment; }
		
		//ID
		public RuleCall getValue_nameIDTerminalRuleCall_0() { return cValue_nameIDTerminalRuleCall_0; }
	}
	public class BConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "secureuml2SQL.SecureUML2SQL.BConstant");
		private final Assignment cConstant_nameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstant_nameIDTerminalRuleCall_0 = (RuleCall)cConstant_nameAssignment.eContents().get(0);
		
		//BConstant:
		//	constant_name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//constant_name=ID
		public Assignment getConstant_nameAssignment() { return cConstant_nameAssignment; }
		
		//ID
		public RuleCall getConstant_nameIDTerminalRuleCall_0() { return cConstant_nameIDTerminalRuleCall_0; }
	}
	
	
	private final SecureUML2SQLElements pSecureUML2SQL;
	private final BMachineElements pBMachine;
	private final BPropertiesElements pBProperties;
	private final BTupleElements pBTuple;
	private final BSetElements pBSet;
	private final BESetElements pBESet;
	private final BSetValueElements pBSetValue;
	private final BConstantElements pBConstant;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SecureUML2SQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSecureUML2SQL = new SecureUML2SQLElements();
		this.pBMachine = new BMachineElements();
		this.pBProperties = new BPropertiesElements();
		this.pBTuple = new BTupleElements();
		this.pBSet = new BSetElements();
		this.pBESet = new BESetElements();
		this.pBSetValue = new BSetValueElements();
		this.pBConstant = new BConstantElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("secureuml2SQL.SecureUML2SQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SecureUML2SQL:
	//	BMachine;
	public SecureUML2SQLElements getSecureUML2SQLAccess() {
		return pSecureUML2SQL;
	}
	
	public ParserRule getSecureUML2SQLRule() {
		return getSecureUML2SQLAccess().getRule();
	}
	
	//BMachine:
	//	'MACHINE' m_name=ID
	//	'SETS'
	//	//sets+=BSet(';' sets+=BSet)*
	//	esets+=BESet (';' esets+=BESet)*
	//	'CONSTANTS'
	//	cons+=BConstant (',' cons+=BConstant)*
	//	'PROPERTIES'
	//	pros+=BProperties ('&' pros+=BProperties)*
	//	'END';
	public BMachineElements getBMachineAccess() {
		return pBMachine;
	}
	
	public ParserRule getBMachineRule() {
		return getBMachineAccess().getRule();
	}
	
	//BProperties:
	//	cons=ID '=' prop='{' pairs+=BTuple (',' pairs+=BTuple)* '}';
	public BPropertiesElements getBPropertiesAccess() {
		return pBProperties;
	}
	
	public ParserRule getBPropertiesRule() {
		return getBPropertiesAccess().getRule();
	}
	
	//BTuple:
	//	ran=ID '|->' dom=ID;
	public BTupleElements getBTupleAccess() {
		return pBTuple;
	}
	
	public ParserRule getBTupleRule() {
		return getBTupleAccess().getRule();
	}
	
	//BSet:
	//	set_name=ID;
	public BSetElements getBSetAccess() {
		return pBSet;
	}
	
	public ParserRule getBSetRule() {
		return getBSetAccess().getRule();
	}
	
	//BESet:
	//	set_name=ID '=' '{' values+=BSetValue (',' values+=BSetValue)* '}';
	public BESetElements getBESetAccess() {
		return pBESet;
	}
	
	public ParserRule getBESetRule() {
		return getBESetAccess().getRule();
	}
	
	//BSetValue:
	//	value_name=ID;
	public BSetValueElements getBSetValueAccess() {
		return pBSetValue;
	}
	
	public ParserRule getBSetValueRule() {
		return getBSetValueAccess().getRule();
	}
	
	//BConstant:
	//	constant_name=ID;
	public BConstantElements getBConstantAccess() {
		return pBConstant;
	}
	
	public ParserRule getBConstantRule() {
		return getBConstantAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
