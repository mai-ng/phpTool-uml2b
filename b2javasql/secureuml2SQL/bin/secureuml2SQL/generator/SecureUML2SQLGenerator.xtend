/*
 * generated by Xtext 2.10.0
 */
package secureuml2SQL.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import secureuml2SQL.secureUML2SQL.BESet
import secureuml2SQL.secureUML2SQL.BMachine
import secureuml2SQL.secureUML2SQL.BProperties

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SecureUML2SQLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (t : resource.allContents.toIterable.filter(BMachine)) {
            fsa.generateFile(
                t.m_name + ".sql", t.compile)
        }
}

def compile(BMachine m)'''
		//Generated SQL code  «m.m_name»
			«FOR s: m.esets»
	    	    «s.compile»
	    	«ENDFOR»
	    	«FOR p : m.pros»
	    		«p.compile»
	    	«ENDFOR»
	}
    '''
    def compile (BESet set)'''   
    	«IF set.set_name.equals('Users')»
    	//Create database users
			«FOR v : set.values»«IF !v.value_name.equals('noneuser')»
			CREATE LOGIN  «v.value_name» WITH PASSWORD = pwd«v.value_name»
			CREATE USER «v.value_name» FOR LOGIN «v.value_name»
				
	    	«ENDIF»«ENDFOR»
			
	    «ELSEIF set.set_name.equals('Roles')»
    	//Create database roles
	    	«FOR v : set.values»«IF !v.value_name.equals('nonerole')»
    		CREATE ROLE «v.value_name»    			
	    	«ENDIF»«ENDFOR»
	    «ENDIF»
    '''
    
    def compile (BProperties pro)'''
    	«IF pro.cons.equals('Permissions')»
    	//Grant permissions
    		«FOR  p : pro.pairs»
    		GRANT EXECUTE ON «p.dom» TO «p.ran»    					
    		«ENDFOR»   	
    	«ELSEIF pro.cons.equals('UsersRoles')»
    	 // Assign roles to users
    		«FOR p : pro.pairs»
    	    ALTER ROLE «p.dom»	ADD MEMBER «p.ran»    	    			
    		 «ENDFOR»
    	«ENDIF»
    '''
}
