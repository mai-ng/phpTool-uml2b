/**
 * generated by Xtext 2.10.0
 */
package secureuml2SQL.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import secureuml2SQL.secureUML2SQL.BESet;
import secureuml2SQL.secureUML2SQL.BMachine;
import secureuml2SQL.secureUML2SQL.BProperties;
import secureuml2SQL.secureUML2SQL.BSetValue;
import secureuml2SQL.secureUML2SQL.BTuple;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SecureUML2SQLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<BMachine> _filter = Iterables.<BMachine>filter(_iterable, BMachine.class);
    for (final BMachine t : _filter) {
      String _m_name = t.getM_name();
      String _plus = (_m_name + ".sql");
      CharSequence _compile = this.compile(t);
      fsa.generateFile(_plus, _compile);
    }
  }
  
  public CharSequence compile(final BMachine m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("//Generated SQL code  ");
    String _m_name = m.getM_name();
    _builder.append(_m_name, "\t");
    _builder.newLineIfNotEmpty();
    {
      EList<BESet> _esets = m.getEsets();
      for(final BESet s : _esets) {
        CharSequence _compile = this.compile(s);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<BProperties> _pros = m.getPros();
      for(final BProperties p : _pros) {
        _builder.append("    \t");
        CharSequence _compile_1 = this.compile(p);
        _builder.append(_compile_1, "    \t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final BESet set) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _set_name = set.getSet_name();
      boolean _equals = _set_name.equals("Users");
      if (_equals) {
        _builder.append("    \t");
        _builder.append("//Create database users");
        _builder.newLine();
        {
          EList<BSetValue> _values = set.getValues();
          for(final BSetValue v : _values) {
            {
              String _value_name = v.getValue_name();
              boolean _equals_1 = _value_name.equals("noneuser");
              boolean _not = (!_equals_1);
              if (_not) {
                _builder.append("CREATE LOGIN  ");
                String _value_name_1 = v.getValue_name();
                _builder.append(_value_name_1, "");
                _builder.append(" WITH PASSWORD = pwd");
                String _value_name_2 = v.getValue_name();
                _builder.append(_value_name_2, "");
                _builder.newLineIfNotEmpty();
                _builder.append("CREATE USER ");
                String _value_name_3 = v.getValue_name();
                _builder.append(_value_name_3, "");
                _builder.append(" FOR LOGIN ");
                String _value_name_4 = v.getValue_name();
                _builder.append(_value_name_4, "");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.newLine();
              }
            }
          }
        }
        _builder.newLine();
      } else {
        String _set_name_1 = set.getSet_name();
        boolean _equals_2 = _set_name_1.equals("Roles");
        if (_equals_2) {
          _builder.append("//Create database roles");
          _builder.newLine();
          {
            EList<BSetValue> _values_1 = set.getValues();
            for(final BSetValue v_1 : _values_1) {
              {
                String _value_name_5 = v_1.getValue_name();
                boolean _equals_3 = _value_name_5.equals("nonerole");
                boolean _not_1 = (!_equals_3);
                if (_not_1) {
                  _builder.append("CREATE ROLE ");
                  String _value_name_6 = v_1.getValue_name();
                  _builder.append(_value_name_6, "");
                  _builder.append("    \t\t\t");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final BProperties pro) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _cons = pro.getCons();
      boolean _equals = _cons.equals("Permissions");
      if (_equals) {
        _builder.append("//Grant permissions");
        _builder.newLine();
        {
          EList<BTuple> _pairs = pro.getPairs();
          for(final BTuple p : _pairs) {
            _builder.append("\t");
            _builder.append("GRANT EXECUTE ON ");
            String _dom = p.getDom();
            _builder.append(_dom, "\t");
            _builder.append(" TO ");
            String _ran = p.getRan();
            _builder.append(_ran, "\t");
            _builder.append("    \t\t\t\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        String _cons_1 = pro.getCons();
        boolean _equals_1 = _cons_1.equals("UsersRoles");
        if (_equals_1) {
          _builder.append("// Assign roles to users");
          _builder.newLine();
          {
            EList<BTuple> _pairs_1 = pro.getPairs();
            for(final BTuple p_1 : _pairs_1) {
              _builder.append("ALTER ROLE ");
              String _dom_1 = p_1.getDom();
              _builder.append(_dom_1, "");
              _builder.append("\tADD MEMBER ");
              String _ran_1 = p_1.getRan();
              _builder.append(_ran_1, "");
              _builder.append("    \t    \t\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
}
