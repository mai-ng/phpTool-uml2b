/*
 * generated by Xtext 2.10.0
 */
package bsql2java.generator

import bsql2java.bSQL2Java.BSOperation
import bsql2java.bSQL2Java.BSQLMachine
import bsql2java.bSQL2Java.BType
import bsql2java.bSQL2Java.BoolOperation
import bsql2java.bSQL2Java.VoidOperation
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BSQL2JavaGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (t : resource.allContents.toIterable.filter(BSQLMachine)) {
            fsa.generateFile(
                t.m_name + ".java", t.compile)
        }
	}
	
	def compile(BSQLMachine m)'''
		//JAVA code of «m.m_name»
		import java.sql.CallableStatement;
		import java.sql.Connection;
		import java.sql.ResultSet;
		import java.sql.SQLException;
		public class «m.m_name»{
			private Connection dbcon;
			«FOR o : m.ops»
	    	    «o.compile»
	    	«ENDFOR»}
    '''
    
    def compile(BSOperation o)'''
    	«o.bop.compile»
    	«o.vop.compile»
    '''
    def compile (BoolOperation bo)'''
   	public boolean «bo.op_name»(«FOR p : bo.params SEPARATOR ','» «p.type.btype2javatype» «p.p_name» «ENDFOR») {
   		CallableStatement statem;
   		try{
		   statem = dbcon.prepareCall("{call «bo.op_name» (?)}");
	   		«var index = 0»
	   		«FOR p : bo.params SEPARATOR ';'»    			
	   			statem.«p.type.btype2javatypesetting»(«index = index + 1»,«p.p_name»); 
	   		«ENDFOR»
	   		//execution of the statement, returns true if the
	   		//result of the query is empty
	   		ResultSet res = statem.executeQuery();
	   		return (res.getInt(1)==0);
	   	}catch (SQLException e){};
	   	return false;
   }
   		
   '''
   
       def btype2javatype(BType t)'''
    	«switch t.type_name{
    		case 'NAT': 'int'
    		case 'BOOL': 'boolean'
    		case 'STR': 'String'
    		default: 'int' 	
    	}»
    ''' 
    
    def btype2javatypesetting(BType t)'''
    	«switch t.type_name{
    		case 'NAT': 'setInt'
    		case 'BOOL': 'setBoolean'
    		case 'STR': 'setString'
    		default: 'setInt' 	
    	}»
    ''' 
   
    def compile(VoidOperation vo)'''
    	TO DO...
    '''
}
