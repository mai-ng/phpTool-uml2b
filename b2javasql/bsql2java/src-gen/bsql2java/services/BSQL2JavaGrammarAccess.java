/*
 * generated by Xtext 2.10.0
 */
package bsql2java.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BSQL2JavaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BSQL2JavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BSQL2Java");
		private final RuleCall cBSQLMachineParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BSQL2Java:
		//	BSQLMachine;
		@Override public ParserRule getRule() { return rule; }
		
		//BSQLMachine
		public RuleCall getBSQLMachineParserRuleCall() { return cBSQLMachineParserRuleCall; }
	}
	public class BSQLMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BSQLMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMACHINEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cM_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cM_nameIDTerminalRuleCall_1_0 = (RuleCall)cM_nameAssignment_1.eContents().get(0);
		private final Keyword cVARIABLESKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarsIDTerminalRuleCall_3_0 = (RuleCall)cVarsAssignment_3.eContents().get(0);
		private final Keyword cINVARIANTKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInvAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInvBTableParserRuleCall_5_0 = (RuleCall)cInvAssignment_5.eContents().get(0);
		private final Keyword cINITIALISATIONKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInitAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInitIDTerminalRuleCall_7_0 = (RuleCall)cInitAssignment_7.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cOPERATIONSKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOpsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOpsBSOperationParserRuleCall_11_0 = (RuleCall)cOpsAssignment_11.eContents().get(0);
		
		//BSQLMachine:
		//	'MACHINE' m_name=ID
		//	'VARIABLES' vars=ID
		//	'INVARIANT'
		//	inv=BTable
		//	'INITIALISATION'
		//	init=ID ':=' '{}'
		//	'OPERATIONS'
		//	ops+=BSOperation+;
		@Override public ParserRule getRule() { return rule; }
		
		//'MACHINE' m_name=ID 'VARIABLES' vars=ID 'INVARIANT' inv=BTable 'INITIALISATION' init=ID ':=' '{}' 'OPERATIONS'
		//ops+=BSOperation+
		public Group getGroup() { return cGroup; }
		
		//'MACHINE'
		public Keyword getMACHINEKeyword_0() { return cMACHINEKeyword_0; }
		
		//m_name=ID
		public Assignment getM_nameAssignment_1() { return cM_nameAssignment_1; }
		
		//ID
		public RuleCall getM_nameIDTerminalRuleCall_1_0() { return cM_nameIDTerminalRuleCall_1_0; }
		
		//'VARIABLES'
		public Keyword getVARIABLESKeyword_2() { return cVARIABLESKeyword_2; }
		
		//vars=ID
		public Assignment getVarsAssignment_3() { return cVarsAssignment_3; }
		
		//ID
		public RuleCall getVarsIDTerminalRuleCall_3_0() { return cVarsIDTerminalRuleCall_3_0; }
		
		//'INVARIANT'
		public Keyword getINVARIANTKeyword_4() { return cINVARIANTKeyword_4; }
		
		//inv=BTable
		public Assignment getInvAssignment_5() { return cInvAssignment_5; }
		
		//BTable
		public RuleCall getInvBTableParserRuleCall_5_0() { return cInvBTableParserRuleCall_5_0; }
		
		//'INITIALISATION'
		public Keyword getINITIALISATIONKeyword_6() { return cINITIALISATIONKeyword_6; }
		
		//init=ID
		public Assignment getInitAssignment_7() { return cInitAssignment_7; }
		
		//ID
		public RuleCall getInitIDTerminalRuleCall_7_0() { return cInitIDTerminalRuleCall_7_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_8() { return cColonEqualsSignKeyword_8; }
		
		//'{}'
		public Keyword getLeftCurlyBracketRightCurlyBracketKeyword_9() { return cLeftCurlyBracketRightCurlyBracketKeyword_9; }
		
		//'OPERATIONS'
		public Keyword getOPERATIONSKeyword_10() { return cOPERATIONSKeyword_10; }
		
		//ops+=BSOperation+
		public Assignment getOpsAssignment_11() { return cOpsAssignment_11; }
		
		//BSOperation
		public RuleCall getOpsBSOperationParserRuleCall_11_0() { return cOpsBSOperationParserRuleCall_11_0; }
	}
	public class BTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTable_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTable_nameIDTerminalRuleCall_0_0 = (RuleCall)cTable_nameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStructKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BTable:
		//	table_name=ID '<:' 'struct' '('
		//	attributes+=Attribute (',' attributes+=Attribute)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//table_name=ID '<:' 'struct' '(' attributes+=Attribute (',' attributes+=Attribute)* ')'
		public Group getGroup() { return cGroup; }
		
		//table_name=ID
		public Assignment getTable_nameAssignment_0() { return cTable_nameAssignment_0; }
		
		//ID
		public RuleCall getTable_nameIDTerminalRuleCall_0_0() { return cTable_nameIDTerminalRuleCall_0_0; }
		
		//'<:'
		public Keyword getLessThanSignColonKeyword_1() { return cLessThanSignColonKeyword_1; }
		
		//'struct'
		public Keyword getStructKeyword_2() { return cStructKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_1_0() { return cAttributesAttributeParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtt_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtt_nameIDTerminalRuleCall_0_0 = (RuleCall)cAtt_nameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//	att_name=ID ':' type=BType;
		@Override public ParserRule getRule() { return rule; }
		
		//att_name=ID ':' type=BType
		public Group getGroup() { return cGroup; }
		
		//att_name=ID
		public Assignment getAtt_nameAssignment_0() { return cAtt_nameAssignment_0; }
		
		//ID
		public RuleCall getAtt_nameIDTerminalRuleCall_0_0() { return cAtt_nameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=BType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BType
		public RuleCall getTypeBTypeParserRuleCall_2_0() { return cTypeBTypeParserRuleCall_2_0; }
	}
	public class BTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BType");
		private final Assignment cType_nameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cType_nameIDTerminalRuleCall_0 = (RuleCall)cType_nameAssignment.eContents().get(0);
		
		//BType:
		//	type_name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type_name=ID
		public Assignment getType_nameAssignment() { return cType_nameAssignment; }
		
		//ID
		public RuleCall getType_nameIDTerminalRuleCall_0() { return cType_nameIDTerminalRuleCall_0; }
	}
	public class BValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cFALSEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTRUEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BValue:
		//	ID | INT | 'FALSE' | 'TRUE';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT | 'FALSE' | 'TRUE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_2() { return cFALSEKeyword_2; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_3() { return cTRUEKeyword_3; }
	}
	public class BSOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BSOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBopAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBopBoolOperationParserRuleCall_0_0 = (RuleCall)cBopAssignment_0.eContents().get(0);
		private final Assignment cVopAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVopVoidOperationParserRuleCall_1_0 = (RuleCall)cVopAssignment_1.eContents().get(0);
		
		//BSOperation:
		//	bop=BoolOperation | vop=VoidOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//bop=BoolOperation | vop=VoidOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bop=BoolOperation
		public Assignment getBopAssignment_0() { return cBopAssignment_0; }
		
		//BoolOperation
		public RuleCall getBopBoolOperationParserRuleCall_0_0() { return cBopBoolOperationParserRuleCall_0_0; }
		
		//vop=VoidOperation
		public Assignment getVopAssignment_1() { return cVopAssignment_1; }
		
		//VoidOperation
		public RuleCall getVopVoidOperationParserRuleCall_1_0() { return cVopVoidOperationParserRuleCall_1_0; }
	}
	public class BoolOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BoolOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOp_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp_nameIDTerminalRuleCall_2_0 = (RuleCall)cOp_nameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPListAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPListIDTerminalRuleCall_4_0_0 = (RuleCall)cPListAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPListAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPListIDTerminalRuleCall_4_1_1_0 = (RuleCall)cPListAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPREKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cParamsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cParamsBParameterParserRuleCall_8_0_0 = (RuleCall)cParamsAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cAmpersandKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cParamsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cParamsBParameterParserRuleCall_8_1_1_0 = (RuleCall)cParamsAssignment_8_1_1.eContents().get(0);
		private final Keyword cTHENKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cResKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cColonEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cBoolKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cNumberSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cObjTableAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cObjTableTableInstanceParserRuleCall_14_0 = (RuleCall)cObjTableAssignment_14.eContents().get(0);
		private final Keyword cAmpersandKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cPresAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cPresBPredicateParserRuleCall_16_0 = (RuleCall)cPresAssignment_16.eContents().get(0);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cAmpersandKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Assignment cPresAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cPresBPredicateParserRuleCall_17_1_0 = (RuleCall)cPresAssignment_17_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cRightParenthesisKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cENDKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//BoolOperation:
		//	'res' '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
		//	'PRE' (params+=BParameter ('&' params+=BParameter)*) 'THEN'
		//	//(subs += BSubstitution)*
		//	'res' ':=' 'bool(' '#' objTable=TableInstance '&' pres+=BPredicate ('&' pres+=BPredicate)* ')' ')'
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//'res' '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '=' 'PRE' (params+=BParameter ('&' params+=BParameter)*)
		//'THEN' //(subs += BSubstitution)*
		//'res' ':=' 'bool(' '#' objTable=TableInstance '&' pres+=BPredicate ('&' pres+=BPredicate)* ')' ')' 'END'
		public Group getGroup() { return cGroup; }
		
		//'res'
		public Keyword getResKeyword_0() { return cResKeyword_0; }
		
		//'<--'
		public Keyword getLessThanSignHyphenMinusHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusHyphenMinusKeyword_1; }
		
		//op_name=ID
		public Assignment getOp_nameAssignment_2() { return cOp_nameAssignment_2; }
		
		//ID
		public RuleCall getOp_nameIDTerminalRuleCall_2_0() { return cOp_nameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(pList+=ID (',' pList+=ID)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//pList+=ID
		public Assignment getPListAssignment_4_0() { return cPListAssignment_4_0; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_4_0_0() { return cPListIDTerminalRuleCall_4_0_0; }
		
		//(',' pList+=ID)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//pList+=ID
		public Assignment getPListAssignment_4_1_1() { return cPListAssignment_4_1_1; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_4_1_1_0() { return cPListIDTerminalRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//'PRE'
		public Keyword getPREKeyword_7() { return cPREKeyword_7; }
		
		//(params+=BParameter ('&' params+=BParameter)*)
		public Group getGroup_8() { return cGroup_8; }
		
		//params+=BParameter
		public Assignment getParamsAssignment_8_0() { return cParamsAssignment_8_0; }
		
		//BParameter
		public RuleCall getParamsBParameterParserRuleCall_8_0_0() { return cParamsBParameterParserRuleCall_8_0_0; }
		
		//('&' params+=BParameter)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_8_1_0() { return cAmpersandKeyword_8_1_0; }
		
		//params+=BParameter
		public Assignment getParamsAssignment_8_1_1() { return cParamsAssignment_8_1_1; }
		
		//BParameter
		public RuleCall getParamsBParameterParserRuleCall_8_1_1_0() { return cParamsBParameterParserRuleCall_8_1_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_9() { return cTHENKeyword_9; }
		
		////(subs += BSubstitution)*
		//'res'
		public Keyword getResKeyword_10() { return cResKeyword_10; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_11() { return cColonEqualsSignKeyword_11; }
		
		//'bool('
		public Keyword getBoolKeyword_12() { return cBoolKeyword_12; }
		
		//'#'
		public Keyword getNumberSignKeyword_13() { return cNumberSignKeyword_13; }
		
		//objTable=TableInstance
		public Assignment getObjTableAssignment_14() { return cObjTableAssignment_14; }
		
		//TableInstance
		public RuleCall getObjTableTableInstanceParserRuleCall_14_0() { return cObjTableTableInstanceParserRuleCall_14_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_15() { return cAmpersandKeyword_15; }
		
		//pres+=BPredicate
		public Assignment getPresAssignment_16() { return cPresAssignment_16; }
		
		//BPredicate
		public RuleCall getPresBPredicateParserRuleCall_16_0() { return cPresBPredicateParserRuleCall_16_0; }
		
		//('&' pres+=BPredicate)*
		public Group getGroup_17() { return cGroup_17; }
		
		//'&'
		public Keyword getAmpersandKeyword_17_0() { return cAmpersandKeyword_17_0; }
		
		//pres+=BPredicate
		public Assignment getPresAssignment_17_1() { return cPresAssignment_17_1; }
		
		//BPredicate
		public RuleCall getPresBPredicateParserRuleCall_17_1_0() { return cPresBPredicateParserRuleCall_17_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_18() { return cRightParenthesisKeyword_18; }
		
		//')'
		public Keyword getRightParenthesisKeyword_19() { return cRightParenthesisKeyword_19; }
		
		//'END'
		public Keyword getENDKeyword_20() { return cENDKeyword_20; }
	}
	public class VoidOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.VoidOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp_nameIDTerminalRuleCall_0_0 = (RuleCall)cOp_nameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPListIDTerminalRuleCall_2_0_0 = (RuleCall)cPListAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPListIDTerminalRuleCall_2_1_1_0 = (RuleCall)cPListAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cPREKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParamsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParamsBParameterParserRuleCall_6_0_0 = (RuleCall)cParamsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cAmpersandKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParamsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParamsBParameterParserRuleCall_6_1_1_0 = (RuleCall)cParamsAssignment_6_1_1.eContents().get(0);
		private final Keyword cTHENKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSubsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSubsBSubstitutionParserRuleCall_8_0 = (RuleCall)cSubsAssignment_8.eContents().get(0);
		private final Keyword cENDKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//VoidOperation:
		//	op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
		//	'PRE' (params+=BParameter ('&' params+=BParameter)*) 'THEN'
		//	subs+=BSubstitution*
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '=' 'PRE' (params+=BParameter ('&' params+=BParameter)*) 'THEN'
		//subs+=BSubstitution* 'END'
		public Group getGroup() { return cGroup; }
		
		//op_name=ID
		public Assignment getOp_nameAssignment_0() { return cOp_nameAssignment_0; }
		
		//ID
		public RuleCall getOp_nameIDTerminalRuleCall_0_0() { return cOp_nameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(pList+=ID (',' pList+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//pList+=ID
		public Assignment getPListAssignment_2_0() { return cPListAssignment_2_0; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_2_0_0() { return cPListIDTerminalRuleCall_2_0_0; }
		
		//(',' pList+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//pList+=ID
		public Assignment getPListAssignment_2_1_1() { return cPListAssignment_2_1_1; }
		
		//ID
		public RuleCall getPListIDTerminalRuleCall_2_1_1_0() { return cPListIDTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'PRE'
		public Keyword getPREKeyword_5() { return cPREKeyword_5; }
		
		//(params+=BParameter ('&' params+=BParameter)*)
		public Group getGroup_6() { return cGroup_6; }
		
		//params+=BParameter
		public Assignment getParamsAssignment_6_0() { return cParamsAssignment_6_0; }
		
		//BParameter
		public RuleCall getParamsBParameterParserRuleCall_6_0_0() { return cParamsBParameterParserRuleCall_6_0_0; }
		
		//('&' params+=BParameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_6_1_0() { return cAmpersandKeyword_6_1_0; }
		
		//params+=BParameter
		public Assignment getParamsAssignment_6_1_1() { return cParamsAssignment_6_1_1; }
		
		//BParameter
		public RuleCall getParamsBParameterParserRuleCall_6_1_1_0() { return cParamsBParameterParserRuleCall_6_1_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_7() { return cTHENKeyword_7; }
		
		//subs+=BSubstitution*
		public Assignment getSubsAssignment_8() { return cSubsAssignment_8; }
		
		//BSubstitution
		public RuleCall getSubsBSubstitutionParserRuleCall_8_0() { return cSubsBSubstitutionParserRuleCall_8_0; }
		
		//'END'
		public Keyword getENDKeyword_9() { return cENDKeyword_9; }
	}
	public class BPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPLeftAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPLeftSQLCallParserRuleCall_1_0_0 = (RuleCall)cPLeftAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPRightBValueParserRuleCall_1_2_0 = (RuleCall)cPRightAssignment_1_2.eContents().get(0);
		
		//BPredicate:
		//	{BPredicate} (PLeft=SQLCall '=' PRight=BValue);
		@Override public ParserRule getRule() { return rule; }
		
		//{BPredicate} (PLeft=SQLCall '=' PRight=BValue)
		public Group getGroup() { return cGroup; }
		
		//{BPredicate}
		public Action getBPredicateAction_0() { return cBPredicateAction_0; }
		
		//(PLeft=SQLCall '=' PRight=BValue)
		public Group getGroup_1() { return cGroup_1; }
		
		//PLeft=SQLCall
		public Assignment getPLeftAssignment_1_0() { return cPLeftAssignment_1_0; }
		
		//SQLCall
		public RuleCall getPLeftSQLCallParserRuleCall_1_0_0() { return cPLeftSQLCallParserRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//PRight=BValue
		public Assignment getPRightAssignment_1_2() { return cPRightAssignment_1_2; }
		
		//BValue
		public RuleCall getPRightBValueParserRuleCall_1_2_0() { return cPRightBValueParserRuleCall_1_2_0; }
	}
	public class SQLCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.SQLCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSLeftIDTerminalRuleCall_0_0 = (RuleCall)cSLeftAssignment_0.eContents().get(0);
		private final Keyword cApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSRightIDTerminalRuleCall_2_0 = (RuleCall)cSRightAssignment_2.eContents().get(0);
		
		//SQLCall:
		//	SLeft=ID "'" SRight=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//SLeft=ID "'" SRight=ID
		public Group getGroup() { return cGroup; }
		
		//SLeft=ID
		public Assignment getSLeftAssignment_0() { return cSLeftAssignment_0; }
		
		//ID
		public RuleCall getSLeftIDTerminalRuleCall_0_0() { return cSLeftIDTerminalRuleCall_0_0; }
		
		//"'"
		public Keyword getApostropheKeyword_1() { return cApostropheKeyword_1; }
		
		//SRight=ID
		public Assignment getSRightAssignment_2() { return cSRightAssignment_2; }
		
		//ID
		public RuleCall getSRightIDTerminalRuleCall_2_0() { return cSRightIDTerminalRuleCall_2_0; }
	}
	public class TableInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.TableInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTi_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTi_nameIDTerminalRuleCall_0_0 = (RuleCall)cTi_nameAssignment_0.eContents().get(0);
		private final Keyword cFullStopLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTi_typeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTi_typeTIAssignmentParserRuleCall_2_0 = (RuleCall)cTi_typeAssignment_2.eContents().get(0);
		
		//TableInstance:
		//	ti_name=ID '.(' ti_type=TIAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//ti_name=ID '.(' ti_type=TIAssignment
		public Group getGroup() { return cGroup; }
		
		//ti_name=ID
		public Assignment getTi_nameAssignment_0() { return cTi_nameAssignment_0; }
		
		//ID
		public RuleCall getTi_nameIDTerminalRuleCall_0_0() { return cTi_nameIDTerminalRuleCall_0_0; }
		
		//'.('
		public Keyword getFullStopLeftParenthesisKeyword_1() { return cFullStopLeftParenthesisKeyword_1; }
		
		//ti_type=TIAssignment
		public Assignment getTi_typeAssignment_2() { return cTi_typeAssignment_2; }
		
		//TIAssignment
		public RuleCall getTi_typeTIAssignmentParserRuleCall_2_0() { return cTi_typeTIAssignmentParserRuleCall_2_0; }
	}
	public class TIAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.TIAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstance_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstance_nameIDTerminalRuleCall_0_0 = (RuleCall)cInstance_nameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstance_typeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstance_typeIDTerminalRuleCall_2_0 = (RuleCall)cInstance_typeAssignment_2.eContents().get(0);
		
		//TIAssignment:
		//	instance_name=ID ':' instance_type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//instance_name=ID ':' instance_type=ID
		public Group getGroup() { return cGroup; }
		
		//instance_name=ID
		public Assignment getInstance_nameAssignment_0() { return cInstance_nameAssignment_0; }
		
		//ID
		public RuleCall getInstance_nameIDTerminalRuleCall_0_0() { return cInstance_nameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//instance_type=ID
		public Assignment getInstance_typeAssignment_2() { return cInstance_typeAssignment_2; }
		
		//ID
		public RuleCall getInstance_typeIDTerminalRuleCall_2_0() { return cInstance_typeIDTerminalRuleCall_2_0; }
	}
	public class BParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cP_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cP_nameIDTerminalRuleCall_0_0 = (RuleCall)cP_nameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//BParameter:
		//	p_name=ID ':' type=BType;
		@Override public ParserRule getRule() { return rule; }
		
		//p_name=ID ':' type=BType
		public Group getGroup() { return cGroup; }
		
		//p_name=ID
		public Assignment getP_nameAssignment_0() { return cP_nameAssignment_0; }
		
		//ID
		public RuleCall getP_nameIDTerminalRuleCall_0_0() { return cP_nameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=BType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BType
		public RuleCall getTypeBTypeParserRuleCall_2_0() { return cTypeBTypeParserRuleCall_2_0; }
	}
	public class BSubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.BSubstitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftIDTerminalRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightBPredicateParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//BSubstitution:
		//	left=ID ':=' right=BPredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ID ':=' right=BPredicate
		public Group getGroup() { return cGroup; }
		
		//left=ID
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ID
		public RuleCall getLeftIDTerminalRuleCall_0_0() { return cLeftIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//right=BPredicate
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//BPredicate
		public RuleCall getRightBPredicateParserRuleCall_2_0() { return cRightBPredicateParserRuleCall_2_0; }
	}
	
	
	private final BSQL2JavaElements pBSQL2Java;
	private final TerminalRule tSTRING;
	private final BSQLMachineElements pBSQLMachine;
	private final BTableElements pBTable;
	private final AttributeElements pAttribute;
	private final BTypeElements pBType;
	private final BValueElements pBValue;
	private final BSOperationElements pBSOperation;
	private final BoolOperationElements pBoolOperation;
	private final VoidOperationElements pVoidOperation;
	private final BPredicateElements pBPredicate;
	private final SQLCallElements pSQLCall;
	private final TableInstanceElements pTableInstance;
	private final TIAssignmentElements pTIAssignment;
	private final BParameterElements pBParameter;
	private final BSubstitutionElements pBSubstitution;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BSQL2JavaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBSQL2Java = new BSQL2JavaElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "bsql2java.BSQL2Java.STRING");
		this.pBSQLMachine = new BSQLMachineElements();
		this.pBTable = new BTableElements();
		this.pAttribute = new AttributeElements();
		this.pBType = new BTypeElements();
		this.pBValue = new BValueElements();
		this.pBSOperation = new BSOperationElements();
		this.pBoolOperation = new BoolOperationElements();
		this.pVoidOperation = new VoidOperationElements();
		this.pBPredicate = new BPredicateElements();
		this.pSQLCall = new SQLCallElements();
		this.pTableInstance = new TableInstanceElements();
		this.pTIAssignment = new TIAssignmentElements();
		this.pBParameter = new BParameterElements();
		this.pBSubstitution = new BSubstitutionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("bsql2java.BSQL2Java".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BSQL2Java:
	//	BSQLMachine;
	public BSQL2JavaElements getBSQL2JavaAccess() {
		return pBSQL2Java;
	}
	
	public ParserRule getBSQL2JavaRule() {
		return getBSQL2JavaAccess().getRule();
	}
	
	//terminal STRING:
	//	'#'
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//BSQLMachine:
	//	'MACHINE' m_name=ID
	//	'VARIABLES' vars=ID
	//	'INVARIANT'
	//	inv=BTable
	//	'INITIALISATION'
	//	init=ID ':=' '{}'
	//	'OPERATIONS'
	//	ops+=BSOperation+;
	public BSQLMachineElements getBSQLMachineAccess() {
		return pBSQLMachine;
	}
	
	public ParserRule getBSQLMachineRule() {
		return getBSQLMachineAccess().getRule();
	}
	
	//BTable:
	//	table_name=ID '<:' 'struct' '('
	//	attributes+=Attribute (',' attributes+=Attribute)*
	//	')';
	public BTableElements getBTableAccess() {
		return pBTable;
	}
	
	public ParserRule getBTableRule() {
		return getBTableAccess().getRule();
	}
	
	//Attribute:
	//	att_name=ID ':' type=BType;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//BType:
	//	type_name=ID;
	public BTypeElements getBTypeAccess() {
		return pBType;
	}
	
	public ParserRule getBTypeRule() {
		return getBTypeAccess().getRule();
	}
	
	//BValue:
	//	ID | INT | 'FALSE' | 'TRUE';
	public BValueElements getBValueAccess() {
		return pBValue;
	}
	
	public ParserRule getBValueRule() {
		return getBValueAccess().getRule();
	}
	
	//BSOperation:
	//	bop=BoolOperation | vop=VoidOperation;
	public BSOperationElements getBSOperationAccess() {
		return pBSOperation;
	}
	
	public ParserRule getBSOperationRule() {
		return getBSOperationAccess().getRule();
	}
	
	//BoolOperation:
	//	'res' '<--' op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
	//	'PRE' (params+=BParameter ('&' params+=BParameter)*) 'THEN'
	//	//(subs += BSubstitution)*
	//	'res' ':=' 'bool(' '#' objTable=TableInstance '&' pres+=BPredicate ('&' pres+=BPredicate)* ')' ')'
	//	'END';
	public BoolOperationElements getBoolOperationAccess() {
		return pBoolOperation;
	}
	
	public ParserRule getBoolOperationRule() {
		return getBoolOperationAccess().getRule();
	}
	
	//VoidOperation:
	//	op_name=ID '(' (pList+=ID (',' pList+=ID)*)? ')' '='
	//	'PRE' (params+=BParameter ('&' params+=BParameter)*) 'THEN'
	//	subs+=BSubstitution*
	//	'END';
	public VoidOperationElements getVoidOperationAccess() {
		return pVoidOperation;
	}
	
	public ParserRule getVoidOperationRule() {
		return getVoidOperationAccess().getRule();
	}
	
	//BPredicate:
	//	{BPredicate} (PLeft=SQLCall '=' PRight=BValue);
	public BPredicateElements getBPredicateAccess() {
		return pBPredicate;
	}
	
	public ParserRule getBPredicateRule() {
		return getBPredicateAccess().getRule();
	}
	
	//SQLCall:
	//	SLeft=ID "'" SRight=ID;
	public SQLCallElements getSQLCallAccess() {
		return pSQLCall;
	}
	
	public ParserRule getSQLCallRule() {
		return getSQLCallAccess().getRule();
	}
	
	//TableInstance:
	//	ti_name=ID '.(' ti_type=TIAssignment;
	public TableInstanceElements getTableInstanceAccess() {
		return pTableInstance;
	}
	
	public ParserRule getTableInstanceRule() {
		return getTableInstanceAccess().getRule();
	}
	
	//TIAssignment:
	//	instance_name=ID ':' instance_type=ID;
	public TIAssignmentElements getTIAssignmentAccess() {
		return pTIAssignment;
	}
	
	public ParserRule getTIAssignmentRule() {
		return getTIAssignmentAccess().getRule();
	}
	
	//BParameter:
	//	p_name=ID ':' type=BType;
	public BParameterElements getBParameterAccess() {
		return pBParameter;
	}
	
	public ParserRule getBParameterRule() {
		return getBParameterAccess().getRule();
	}
	
	//BSubstitution:
	//	left=ID ':=' right=BPredicate;
	public BSubstitutionElements getBSubstitutionAccess() {
		return pBSubstitution;
	}
	
	public ParserRule getBSubstitutionRule() {
		return getBSubstitutionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
