/*
 * generated by Xtext 2.10.0
 */
package bsqllog2java.serializer;

import bsqllog2java.bSQLLog2Java.Attribute;
import bsqllog2java.bSQLLog2Java.BAnyBlock;
import bsqllog2java.bSQLLog2Java.BElement;
import bsqllog2java.bSQLLog2Java.BElementStructure;
import bsqllog2java.bSQLLog2Java.BOperation;
import bsqllog2java.bSQLLog2Java.BParameterTyping;
import bsqllog2java.bSQLLog2Java.BPredicate;
import bsqllog2java.bSQLLog2Java.BSQLLog2JavaPackage;
import bsqllog2java.bSQLLog2Java.BSQLMachine;
import bsqllog2java.bSQLLog2Java.BSet;
import bsqllog2java.bSQLLog2Java.BSubFalse;
import bsqllog2java.bSQLLog2Java.BSubTrue;
import bsqllog2java.bSQLLog2Java.BSubstitution;
import bsqllog2java.bSQLLog2Java.BTable;
import bsqllog2java.bSQLLog2Java.BType;
import bsqllog2java.bSQLLog2Java.BUnion;
import bsqllog2java.bSQLLog2Java.BoolOperation;
import bsqllog2java.bSQLLog2Java.SQLCall;
import bsqllog2java.bSQLLog2Java.StringOperation;
import bsqllog2java.bSQLLog2Java.TIAssignment;
import bsqllog2java.bSQLLog2Java.TableInstance;
import bsqllog2java.bSQLLog2Java.VoidOperation;
import bsqllog2java.services.BSQLLog2JavaGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BSQLLog2JavaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BSQLLog2JavaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BSQLLog2JavaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BSQLLog2JavaPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BANY_BLOCK:
				sequence_BAnyBlock(context, (BAnyBlock) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BELEMENT:
				sequence_BElement(context, (BElement) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BELEMENT_STRUCTURE:
				sequence_BElementStructure(context, (BElementStructure) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BOPERATION:
				sequence_BOperation(context, (BOperation) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BPARAMETER_TYPING:
				sequence_BParameterTyping(context, (BParameterTyping) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BPREDICATE:
				sequence_BPredicate(context, (BPredicate) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BSQL_MACHINE:
				sequence_BSQLMachine(context, (BSQLMachine) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BSET:
				sequence_BSet(context, (BSet) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BSUB_FALSE:
				sequence_BSubFalse(context, (BSubFalse) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BSUB_TRUE:
				sequence_BSubTrue(context, (BSubTrue) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BSUBSTITUTION:
				sequence_BSubstitution(context, (BSubstitution) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BTABLE:
				sequence_BTable(context, (BTable) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BTYPE:
				sequence_BType(context, (BType) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BUNION:
				sequence_BUnion(context, (BUnion) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.BOOL_OPERATION:
				sequence_BoolOperation(context, (BoolOperation) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.SQL_CALL:
				sequence_SQLCall(context, (SQLCall) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.STRING_OPERATION:
				sequence_StringOperation(context, (StringOperation) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.TI_ASSIGNMENT:
				sequence_TIAssignment(context, (TIAssignment) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.TABLE_INSTANCE:
				sequence_TableInstance(context, (TableInstance) semanticObject); 
				return; 
			case BSQLLog2JavaPackage.VOID_OPERATION:
				sequence_VoidOperation(context, (VoidOperation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (att_name=ID type=BType)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.ATTRIBUTE__ATT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.ATTRIBUTE__ATT_NAME));
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getAtt_nameIDTerminalRuleCall_0_0(), semanticObject.getAtt_name());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeBTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BAnyBlock returns BAnyBlock
	 *
	 * Constraint:
	 *     (
	 *         varList+=ID 
	 *         varList+=ID* 
	 *         varTyping+=BParameterTyping 
	 *         varTyping+=BParameterTyping* 
	 *         pres+=BPredicate 
	 *         pres+=BPredicate* 
	 *         subs+=BSubstitution 
	 *         subs+=BSubstitution*
	 *     )
	 */
	protected void sequence_BAnyBlock(ISerializationContext context, BAnyBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BElementStructure returns BElementStructure
	 *
	 * Constraint:
	 *     (e+=BElement e+=BElement*)
	 */
	protected void sequence_BElementStructure(ISerializationContext context, BElementStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BElement returns BElement
	 *
	 * Constraint:
	 *     ename=ID
	 */
	protected void sequence_BElement(ISerializationContext context, BElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.BELEMENT__ENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.BELEMENT__ENAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBElementAccess().getEnameIDTerminalRuleCall_0(), semanticObject.getEname());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BOperation returns BOperation
	 *
	 * Constraint:
	 *     (bops=BoolOperation | vops=VoidOperation | sops=StringOperation)
	 */
	protected void sequence_BOperation(ISerializationContext context, BOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BParameterTyping returns BParameterTyping
	 *
	 * Constraint:
	 *     (p_name=ID type=BType)
	 */
	protected void sequence_BParameterTyping(ISerializationContext context, BParameterTyping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.BPARAMETER_TYPING__PNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.BPARAMETER_TYPING__PNAME));
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.BPARAMETER_TYPING__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.BPARAMETER_TYPING__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBParameterTypingAccess().getP_nameIDTerminalRuleCall_0_0(), semanticObject.getP_name());
		feeder.accept(grammarAccess.getBParameterTypingAccess().getTypeBTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BPredicate returns BPredicate
	 *
	 * Constraint:
	 *     (PLeft=SQLCall PRight=BValue)
	 */
	protected void sequence_BPredicate(ISerializationContext context, BPredicate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.BPREDICATE__PLEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.BPREDICATE__PLEFT));
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.BPREDICATE__PRIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.BPREDICATE__PRIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBPredicateAccess().getPLeftSQLCallParserRuleCall_1_0_0(), semanticObject.getPLeft());
		feeder.accept(grammarAccess.getBPredicateAccess().getPRightBValueParserRuleCall_1_2_0(), semanticObject.getPRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BSQLLog2Java returns BSQLMachine
	 *     BSQLMachine returns BSQLMachine
	 *
	 * Constraint:
	 *     (
	 *         m_name=ID 
	 *         (seename+=ID seename+=ID*)? 
	 *         vars=ID 
	 *         inv=BTable 
	 *         init=ID 
	 *         bops+=BOperation 
	 *         bops+=BOperation*
	 *     )
	 */
	protected void sequence_BSQLMachine(ISerializationContext context, BSQLMachine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BSet returns BSet
	 *
	 * Constraint:
	 *     set_name=ID
	 */
	protected void sequence_BSet(ISerializationContext context, BSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.BSET__SET_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.BSET__SET_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBSetAccess().getSet_nameIDTerminalRuleCall_0(), semanticObject.getSet_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BSubFalse returns BSubFalse
	 *
	 * Constraint:
	 *     (res=ID objTable=TableInstance pres+=BPredicate pres+=BPredicate*)
	 */
	protected void sequence_BSubFalse(ISerializationContext context, BSubFalse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BSubTrue returns BSubTrue
	 *
	 * Constraint:
	 *     (res=ID objTable=TableInstance pres+=BPredicate pres+=BPredicate*)
	 */
	protected void sequence_BSubTrue(ISerializationContext context, BSubTrue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BSubstitution returns BSubstitution
	 *
	 * Constraint:
	 *     (left=ID (pright=BPredicate | uright=BUnion | sright=SQLCall))
	 */
	protected void sequence_BSubstitution(ISerializationContext context, BSubstitution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BTable returns BTable
	 *
	 * Constraint:
	 *     (table_name=ID attributes+=Attribute attributes+=Attribute*)
	 */
	protected void sequence_BTable(ISerializationContext context, BTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BType returns BType
	 *
	 * Constraint:
	 *     type_name=ID
	 */
	protected void sequence_BType(ISerializationContext context, BType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.BTYPE__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.BTYPE__TYPE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBTypeAccess().getType_nameIDTerminalRuleCall_0(), semanticObject.getType_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BUnion returns BUnion
	 *
	 * Constraint:
	 *     (set=BSet (addedSet=BSet | addedE=BElementStructure))
	 */
	protected void sequence_BUnion(ISerializationContext context, BUnion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BoolOperation returns BoolOperation
	 *
	 * Constraint:
	 *     (
	 *         res=ID 
	 *         op_name=ID 
	 *         (pList+=ID pList+=ID*)? 
	 *         pTyping+=BParameterTyping 
	 *         pTyping+=BParameterTyping* 
	 *         (reshas=BSubTrue | resno=BSubFalse)
	 *     )
	 */
	protected void sequence_BoolOperation(ISerializationContext context, BoolOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SQLCall returns SQLCall
	 *
	 * Constraint:
	 *     (SLeft=ID SRight=ID)
	 */
	protected void sequence_SQLCall(ISerializationContext context, SQLCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.SQL_CALL__SLEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.SQL_CALL__SLEFT));
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.SQL_CALL__SRIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.SQL_CALL__SRIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSQLCallAccess().getSLeftIDTerminalRuleCall_0_0(), semanticObject.getSLeft());
		feeder.accept(grammarAccess.getSQLCallAccess().getSRightIDTerminalRuleCall_2_0(), semanticObject.getSRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StringOperation returns StringOperation
	 *
	 * Constraint:
	 *     (
	 *         res=ID 
	 *         op_name=ID 
	 *         (pList+=ID pList+=ID*)? 
	 *         pTyping+=BParameterTyping 
	 *         pTyping+=BParameterTyping* 
	 *         anyblock=BAnyBlock
	 *     )
	 */
	protected void sequence_StringOperation(ISerializationContext context, StringOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TIAssignment returns TIAssignment
	 *
	 * Constraint:
	 *     (instance_name=ID instance_type=ID)
	 */
	protected void sequence_TIAssignment(ISerializationContext context, TIAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.TI_ASSIGNMENT__INSTANCE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.TI_ASSIGNMENT__INSTANCE_NAME));
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.TI_ASSIGNMENT__INSTANCE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.TI_ASSIGNMENT__INSTANCE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTIAssignmentAccess().getInstance_nameIDTerminalRuleCall_0_0(), semanticObject.getInstance_name());
		feeder.accept(grammarAccess.getTIAssignmentAccess().getInstance_typeIDTerminalRuleCall_2_0(), semanticObject.getInstance_type());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TableInstance returns TableInstance
	 *
	 * Constraint:
	 *     (ti_name=ID ti_type=TIAssignment)
	 */
	protected void sequence_TableInstance(ISerializationContext context, TableInstance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.TABLE_INSTANCE__TI_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.TABLE_INSTANCE__TI_NAME));
			if (transientValues.isValueTransient(semanticObject, BSQLLog2JavaPackage.Literals.TABLE_INSTANCE__TI_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BSQLLog2JavaPackage.Literals.TABLE_INSTANCE__TI_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTableInstanceAccess().getTi_nameIDTerminalRuleCall_0_0(), semanticObject.getTi_name());
		feeder.accept(grammarAccess.getTableInstanceAccess().getTi_typeTIAssignmentParserRuleCall_2_0(), semanticObject.getTi_type());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VoidOperation returns VoidOperation
	 *
	 * Constraint:
	 *     (
	 *         op_name=ID 
	 *         (pList+=ID pList+=ID*)? 
	 *         pTyping+=BParameterTyping 
	 *         pTyping+=BParameterTyping* 
	 *         subs+=BSubstitution 
	 *         subs+=BSubstitution*
	 *     )
	 */
	protected void sequence_VoidOperation(ISerializationContext context, VoidOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
