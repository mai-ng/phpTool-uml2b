import ecore;
import ORBAC2;
import uml;
import b;
import trace;


b::BSpec BSPEC(): GLOBALVAR BSPEC;
uml::Package PACKAGE(): GLOBALVAR UML;
trace::TransformationTrace TRACE(): GLOBALVAR TRACE;
b::BMachine getMachine():BSPEC().systemMachine;

List[BOperation] getBOperations():getMachine().operations;
List[BData] getBData():getMachine().data;

//Set[EObject] toSet_(Collection[EObject] coll):coll.toSet();




//-------------UML2B util-------------------

boolean isConstructor(BOperation op):op.name.contains("_NEW");
boolean isDestructor(BOperation op):op.name.contains("_Free");
boolean isGetter(BOperation op):op.name.contains("_Get");
boolean isSetter(BOperation op):op.name.contains("_Set")||op.name.contains("_Add")||op.name.contains("_Remove");

boolean isAutoGenerated(BOperation op):op.isGetter()||op.isSetter()||op.isConstructor()||op.isDestructor();

boolean isAttributeBOp(BOperation op):!op.getEntityOfBOp().ownedAttribute.select(e|op.name.contains(e.name.toFirstUpper())).isEmpty;
boolean isMethodBOp(BOperation op):!op.getEntityOfBOp().ownedOperation.select(e| op.name.contains(e.name) ).isEmpty;

Class getEntityOfBOp(BOperation op):PACKAGE().allOwnedElements().select(e|Class.isInstance(e)).selectFirst(e| op.name.contains(((Class)e).name));
//Class getEntity(BOperation op):PACKAGE().allOwnedElements().select(e|Class.isInstance(e)).selectFirst(e| op.name.contains(((Class)e).name));
Property getAttributeOfBOp(BOperation op):op.getEntityOfBOp().ownedAttribute.selectFirst(e|op.name.contains(e.name.toFirstUpper()));

Operation getMethodOfBOp(BOperation op):op.getEntityOfBOp().ownedOperation.selectFirst(e|op.name.contains("_"+e.name));

boolean isOperationTypeTagged(Operation op):true;
//boolean isOperationTypeTagged(Operation op):op.isQuery;



//-------------TRACE util-------------------

//
//Collection[EObject] mappedTo(uml::Element e):
//let src=TRACE().resolve(e.getURI().toString() ):
//	((src!=null)&&(src.mapping.dest.ref!=null))?
//	(
//		//get BElement from trace
//		(	let o=src.mapping.dest.ref.collect(r|r.getEObjectFromRS(e) ):
//		//getEObjectFromRS(src.mapping.dest.ref ,e):
//			(	(o!=null )?
//					o
//				:(//get BElement from spec using name
//					debug(" mappedTo("+((uml::NamedElement) e).qualifiedName+") :Enable to getEObjectFromRS '"+src.mapping.dest.ref+"'  \n\t  srcContext: "+e)->
//					debug("ref:  "+src.mapping.dest.ref.collect(r|r.getEObjectFromRS(e) ))->
//				//	BSPEC().eAllContents.typeSelect(BNamedElement).selectFirst(b|b.name==e.getCannonicalName() )
//				null
//				)			
//			)
//		)
//	)
//	:
//	(
//		debug("Enable to resolve '"+((uml::NamedElement) e).qualifiedName+"'  \n\t uri: "+getURI(e).toString()+" \n\t  src: "+src+"  \n\t dest ref : "+src.mapping.dest.ref+"\n\t mappings : "+TRACE().maps)->	
//	null
//	)
//;

//
//EObject mappedFrom(EObject bElement):
//let dest=TRACE().destElements.select(e|e.ref = bElement.getURI().toString()) :
//	((dest!=null)&&(! TRACE().maps.select(e|e.dest.contains(dest)).isEmpty ))?
//	(
//		//get BElement from trace
//		(	let o=TRACE().maps.selectFirst(e|e.dest.contains(dest)):
//		//getEObjectFromRS(src.mapping.dest.ref ,e):
//			(	(o!=null )?
//				getEObjectFromRS(o.src.ref,PACKAGE())				
//			:(//get BElement from spec using name
//					debug(" mappedTo("+((uml::NamedElement) e).qualifiedName+") :Enable to getEObjectFromRS '"+src.mapping.dest.ref+"'  \n\t  srcContext: "+e)->
//					debug("ref:  "+src.mapping.dest.ref.collect(r|r.getEObjectFromRS(e) ))->
//				//	BSPEC().eAllContents.typeSelect(BNamedElement).selectFirst(b|b.name==e.getCannonicalName() )
//				null
//				)			
//			)
//		)
//	)
//	:
//	(
//		debug("Enable to resolve '"+((uml::NamedElement) e).qualifiedName+"'  \n\t uri: "+getURI(e).toString()+" \n\t  src: "+src+"  \n\t dest ref : "+src.mapping.dest.ref+"\n\t mappings : "+TRACE().maps)->	
//	null
//	)
//;

//
//Collection[EObject] mappedToByRule(uml::Element e,String ruleRef):
//let src=TRACE().resolve(e.getURI().toString() ):
//	((src!=null)&&(src.mapping.dest.ref!=null))?
//	(
//		//get BElement from trace
//		(	let o=src.mapping.select(m|m.rule.ref=ruleRef).dest.ref.collect(r|r.getEObjectFromRS(e) ):
//		//getEObjectFromRS(src.mapping.dest.ref ,e):
//			(	(o!=null )?
//					o
//				:(//get BElement from spec using name
//					debug(" mappedTo("+((uml::NamedElement) e).qualifiedName+") :Enable to mappedToByRule '"+src.mapping.dest.ref+"'  \n\t  srcContext: "+e)->
//					debug("ref:  "+src.mapping.dest.ref.collect(r|r.getEObjectFromRS(e) ))->
//				//	BSPEC().eAllContents.typeSelect(BNamedElement).selectFirst(b|b.name==e.getCannonicalName() )
//				null
//				)			
//			)
//		)
//	)
//	:
//	(
//		debug("Enable to resolve '"+((uml::NamedElement) e).qualifiedName+"'  \n\t uri: "+getURI(e).toString()+" \n\t  src: "+src+"  \n\t dest ref : "+src.mapping.dest.ref+"\n\t mappings : "+TRACE().maps)->	
//	null
//	)
//;

//Collection[EObject] mappedTo(uml::Element e,xpand2::Type type):
//	e.mappedTo().select(e|type.isInstance(e));

//-----------------------------
Void debug(String s): JAVA Debugger.debug(java.lang.String);


//-------------Trace util-------------------


EObject MappedTo(EObject sourceElement):MappedTo_(TRACE(),sourceElement);
private EObject MappedTo_(TransformationTrace trace,EObject sourceElement):
JAVA fr.lig.vasco.selkis.ctm.trace.util.TransformationTraceHelper.MappedTo(fr.lig.vasco.selkis.ctm.trace.TransformationTrace,org.eclipse.emf.ecore.EObject);


private EObject MappedToByRule_(TransformationTrace trace,EObject sourceElement, String ruleRef):
JAVA fr.lig.vasco.selkis.ctm.trace.util.TransformationTraceHelper.MappedToByRule(fr.lig.vasco.selkis.ctm.trace.TransformationTrace,org.eclipse.emf.ecore.EObject,java.lang.String);
EObject MappedToByRule(EObject sourceElement, String ruleRef):MappedToByRule_(TRACE(),sourceElement, ruleRef);

private EObject MappedFrom_(TransformationTrace trace,EObject targetElement):
JAVA fr.lig.vasco.selkis.ctm.trace.util.TransformationTraceHelper.MappedFrom(fr.lig.vasco.selkis.ctm.trace.TransformationTrace,org.eclipse.emf.ecore.EObject);
EObject MappedFrom(EObject targetElement):MappedFrom_(TRACE(),targetElement);

private EObject BOpMappedFrom_(TransformationTrace trace,BOperation targetElement):
JAVA fr.lig.vasco.selkis.security.SecureBmodelGenerator.GenUtil.BOpMappedFrom(fr.lig.vasco.selkis.ctm.trace.TransformationTrace,fr.lig.vasco.models.b.BOperation);
EObject BOpMappedFrom(b::BOperation targetElement):BOpMappedFrom_(TRACE(),targetElement);

//JAVA fr.lig.vasco.selkis.ctm.trace.util.TransformationTraceHelper.(fr.lig.vasco.selkis.ctm.trace.TransformationTrace,org.eclipse.emf.ecore.EObject);
//JAVA fr.lig.vasco.selkis.ctm.trace.util.TransformationTraceHelper.(fr.lig.vasco.selkis.ctm.trace.TransformationTrace,org.eclipse.emf.ecore.EObject);
//JAVA fr.lig.vasco.selkis.ctm.trace.util.TransformationTraceHelper.(fr.lig.vasco.selkis.ctm.trace.TransformationTrace,org.eclipse.emf.ecore.EObject);



//-------------UML util-------------------

Class getOwningClass(Element e):
JAVA fr.lig.vasco.selkis.uml.util.UML_Util.getOwningClass(org.eclipse.uml2.uml.Element);


//-------------EMF util-------------------

String getURI(EObject o): 
JAVA fr.lig.vasco.selkis.ctm.emf.util.EMFHelper.getURI(org.eclipse.emf.ecore.EObject);

EObject getEObjectFromRS(String uri,EObject o): 
JAVA fr.lig.vasco.selkis.ctm.emf.util.EMFHelper.getObjectInSameResourceSet(java.lang.String 
																,org.eclipse.emf.ecore.EObject);

String getURIFragment(EObject o): 
JAVA fr.lig.vasco.selkis.ctm.emf.util.EMFHelper.getURIFragment(org.eclipse.emf.ecore.EObject);


EObject resolveProxy(EObject o,EObject ctx): 
	JAVA org.eclipse.emf.ecore.util.EcoreUtil.resolve(org.eclipse.emf.ecore.EObject
													,org.eclipse.emf.ecore.EObject);